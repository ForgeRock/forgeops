# Properties file which configures the operation of the JDK
# logging facility.

# The system will look for this config file, first using
# a System property specified at startup:
#
# >java -Djava.util.logging.config.file=myLoggingConfigFilePath
#
# If this property is not specified, then the config file is
# retrieved from its default location at:
#
# JDK_HOME/jre/lib/logging.properties

############################################################
#      Global properties
############################################################
# ------------------------------------------
# The set of handlers to be loaded upon startup.
# Comma-separated list of class names.
# (? LogManager docs say no comma here, but JDK example has comma.)
# StreamHandler: A simple handler for writing formatted records to an OutputStream.
# ConsoleHandler: A simple handler for writing formatted records to System.err
# FileHandler: A handler that writes formatted log records either to a single file, or to a set of rotating log files.
# SocketHandler: A handler that writes formatted log records to remote TCP ports.
# MemoryHandler: A handler that buffers log records in memory.
# handlers=java.util.logging.ConsoleHandler
handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
# Loggers and Handlers may override this level
.level=INFO

# Loggers
# ------------------------------------------
# Loggers are usually attached to packages.
# Here, the level for each package is specified.
# The global level is used by default, so levels
# specified here simply act as an override.
# The levels in descending order are:
#   SEVERE (highest value)
#   WARNING
#   INFO
#   CONFIG
#   FINE
#   FINER
#   FINEST (lowest value)

# Logging format
# Adding the %1$tL field to the JDK default format to log timestamps with milliseconds
java.util.logging.SimpleFormatter.format = %1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS.%1$tL %1$Tp %2$s%n%4$s: %5$s%6$s%n

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################
#org.forgerock.openidm.provisioner.level = FINER
#org.forgerock.openidm.repo.level = FINER
#org.forgerock.openidm.recon.level = FINER

# OpenICF is noisy at INFO level
org.forgerock.openicf.level=WARNING

# Commons api.models (API Descriptor) is noisy at INFO level
org.forgerock.api.models.level=WARNING

# Logs the output from OSGi logging
org.forgerock.openidm.Framework.level=WARNING

# On restart the BarURLHandler can create warning noise
org.activiti.osgi.BarURLHandler.level=SEVERE

# Suppress warnings of failed connector loading
org.identityconnectors.framework.impl.api.local.LocalConnectorInfoManagerImpl.level=SEVERE

# Log all detail for update processes
org.forgerock.openidm.maintenance.upgrade.level=FINEST

# Suppress messages lower than warnings
org.forgerock.secrets.keystore.level=WARNING

# reduce the logging of embedded postgres since it is very verbose
ru.yandex.qatools.embed.postgresql.level = SEVERE

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# --- ConsoleHandler ---
# Default: java.util.logging.ConsoleHandler.level = INFO
# Override of global logging level
java.util.logging.ConsoleHandler.level = WARNING
java.util.logging.ConsoleHandler.formatter = org.forgerock.openidm.logger.ThreadIdLogFormatter
# specifies the name of the filter class to be associated with this handler,
# defaults to {@code null} if this property is not found or has an invalid value.
java.util.logging.ConsoleHandler.filter=org.forgerock.openidm.config.logging.util.LogFilter

# --- FileHandler ---
# Override of global logging level
java.util.logging.FileHandler.level = ALL

# Naming style for the output file:
# (The output file is placed in the directory
# defined by the "user.home" System property.)
# java.util.logging.FileHandler.pattern = %h/java%u.log
java.util.logging.FileHandler.pattern = logs/openidm%u.log

# Limiting size of output file in bytes:
java.util.logging.FileHandler.limit = 5242880

# Number of output files to cycle through, by appending an
# integer to the base file name:
java.util.logging.FileHandler.count = 5

# Style of output (Simple or XML):
# Writes brief "human-readable" summaries of log records.
java.util.logging.FileHandler.formatter = org.forgerock.openidm.logger.ThreadIdLogFormatter

# Writes detailed XML-structured information.
# java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter

# specifies the character set encoding name.
# defaults to the default platform encoding
java.util.logging.FileHandler.encoding = UTF-8
