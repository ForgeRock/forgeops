{{- if not .Values.platform.disable_secret_agent_config }}
apiVersion: secret-agent.secrets.forgerock.io/v1alpha1
kind: SecretAgentConfiguration
metadata:
  name: forgerock-sac

# CRD settings
spec:
  appConfig:
    createKubernetesObjects: true
    ## Timeout in seconds for generating each individual secret. Default 40
    # secretTimeout: 40

    ## Prefix added to the name of the secrets stored in the cloud secret manager instead of the namespace.
    # secretsManagerPrefix: "benchmark"

    # A cloud provider's secret manager is the source of truth.
    # If secrets don't exist, they are generated and stored in the manager.
    secretsManager: none # none, AWS, Azure, or GCP

    ## When running on GCP, specify a ProjectID
    # gcpProjectID: engineering-devops

    # When running on AWS, specify a region
    # awsRegion: example-region

    # When running on Azure, specify a vault
    # azureVaultName: secret-agent-test

    # credentials for cloud provider
    # credentialsSecretName: cloud-storage-credentials

  # Start of secrets array

  # In this YAML file, the "secrets" key defines Kubernetes secret objects managed by the
  # operator for this configuration.
  #
  # The secrets key's value is an array of maps.
  #
  # Each map has two keys:
  #
  #  name - the name of a Kubernetes secret
  #  keys - a map of one or more secret data values that comprises the Kubernetes secret
  #
  # The data values in the keys map are themselves maps; they have the following keys:
  #
  #  name - the data key - the name of the a piece of data within the Kubernetes secret
  #  type - literal, ca, truststore, password, keyPair, keytool, pkcs12, jceks, or ssh
  #  spec - a map that contains the data value; format varies depending on type

  secrets:

  # platform-ca secret: a root certificate for signing keys

  - name: platform-ca
    keys:

      # When a type of `ca` is set, the names of the keys will be `{name}.pem` and
      # `{name}-private.pem`.

      - name: ca
        type: ca
        spec:
          # These are the values for the certificate's distinguished name.
          # They must be supported by https://golang.org/pkg/crypto/x509/pkix/#Name.
          # Note _SerialNumber_, r_Names_, and _ExtraNames_  aren't supported.
          # Serial Number is generated by the operator.
          distinguishedName:
            commonName: "Deployment key"
            organization:
              - "ForgeRock.com"

  # truststore secret: a single Java truststore for all applications

  - name: truststore-pem
    keys:

      # The keystore alias

      - name: cacerts
        # A truststore that is compatible as a java trust store that as a
        # copy of the system root store at the time of creation and contains
        # keys specfied in `spec.truststoreImportPaths`
        type: truststore
        spec:
          # This truststore will also contain the public key generated in `platform-ca`
          # key `ca`
          #
          # If the the certificate is managed by secret agent the path is simply
          # `name/key`.
          #
          # If there's additional keys or keys generated outside of the operator then:
          # truststoreImportPath is a reference to a secret object's data
          # with the following pattern:
          #   `kubectl get secret {secret object} | jq `.data.{key}.pem`
          #   _note_ the suffix of `.pem`
          #    e.g.
          #      ‚ùØ mkcert vault-ca
          #      Using the local CA at "/home/max/.local/share/mkcert" ‚ú®
          #      Created a new certificate valid for the following names üìú
          #       - "vault-ca"
          #       The certificate is at "./vault-ca.pem" and the key at "./vault-ca-key.pem" ‚úÖ
          #      ‚ùØ kubectl create secret generic vault-secrets --from-file=vault-ca.pem=./vault-ca.pem
          #      secret/vault-secrets created
          # multiple keys
          #   truststoreImportPaths: ["platform-ca/ca", "vault-secrets/vault-ca"]
          pemFormat: true
          truststoreImportPaths: ["platform-ca/ca"]

  # PingDS secrets

  # ds-passwords secret

  - name: ds-passwords
    keys:

      - name: dirmanager.pw
        # A password type is a random human readable string.
        type: password
        spec:
          # Default length 32
          length: 32

      - name: monitor.pw
        type: literal
        spec:
          # A simple string literal
          value: password

  # am-passwords secret

  - name: am-passwords
    keys:
    - name: .keypass
      type: password
      spec:
        length: 24
    - name: .storepass
      type: password
      spec:
        length: 24

  # PingAM secrets

  # am-env-secrets secret

  - name: am-env-secrets
    keys:
    - name: "AM_AUTHENTICATION_SHARED_SECRET"
      type: password
      spec:
        length: 32
        # generate a password/passphrase that uses all ascii bytes
        # e.g. might include control characters and the value is base 64 encoded
        # and application must decode the value
        useBinaryCharacters: true
    - name: "AM_ENCRYPTION_KEY"
      type: password
      spec:
        length: 24
    - name: "AM_OIDC_CLIENT_SUBJECT_IDENTIFIER_HASH_SALT"
      type: password
      spec:
        length: 20
    - name: "AM_PASSWORDS_AMADMIN_CLEAR"
      type: password
      spec:
        length: 24
    - name: "AM_SELFSERVICE_LEGACY_CONFIRMATION_EMAIL_LINK_SIGNING_KEY"
      type: password
      spec:
        length: 32
        useBinaryCharacters: true
    - name: "AM_SESSION_STATELESS_ENCRYPTION_KEY"
      type: password
      spec:
        length: 32
        useBinaryCharacters: true
    - name: "AM_SESSION_STATELESS_SIGNING_KEY"
      type: password
      spec:
        length: 32
        useBinaryCharacters: true

  # am-keystore secret

  - name: am-keystore
    keys:
    - name: keystore.jceks
      type: keytool
      spec:
        storeType: jceks
        storePassPath: am-passwords/.storepass
        keyPassPath: am-passwords/.keypass
        keytoolAliases:
        - name: rsajwtsigningkey
          cmd: genkeypair
          # cmd type of genkeypair takes arbritrary args to the keytool command `genkeypair`
          args: ["-keyalg", "RSA", "-keysize", "2048", "-sigalg", "SHA256WITHRSA", "-validity", "3650", "-dname", "CN=rsajwtsigningkey,O=ForgeRock,L=Bristol,ST=Bristol,C=UK"]
        - name: es256test
          cmd: genkeypair
          args: ["-keyalg", "EC", "-keysize", "256", "-sigalg", "SHA256withECDSA", "-validity", "3650", "-dname", "CN=es256test,O=ForgeRock,L=Bristol,ST=Bristol,C=UK"]
        - name: es384test
          cmd: genkeypair
          args: ["-keyalg", "EC", "-keysize", "384", "-sigalg", "SHA256withECDSA", "-validity", "3650", "-dname", "CN=es384test,O=ForgeRock,L=Bristol,ST=Bristol,C=UK"]
        - name: es512test
          cmd: genkeypair
          args: ["-keyalg", "EC", "-keysize", "521", "-sigalg", "SHA256withECDSA", "-validity", "3650", "-dname", "CN=es512test,O=ForgeRock,L=Bristol,ST=Bristol,C=UK"]
        - name: selfserviceenctest
          cmd: genkeypair
          args: ["-keyalg", "RSA", "-keysize", "2048", "-sigalg", "SHA256WITHRSA", "-validity", "3650", "-dname", "CN=selfserviceenctest,O=ForgeRock,L=Bristol,ST=Bristol,C=UK"]
        - name: test
          cmd: genkeypair
          args: ["-keyalg", "RSA", "-keysize", "2048", "-sigalg", "SHA256WITHRSA", "-validity", "3650", "-dname", "CN=test,O=ForgeRock,L=Bristol,ST=Bristol,C=UK"]
        - name: hmacsigningtest
          cmd: genseckey
          # cmd type of genkeypair takes arbritrary args to the keytool command `genseckey`
          args: ["-keyalg", "HMacSHA512", "-keysize", "512"]
        - name: selfservicesigntest
          cmd: genseckey
          args: ["-keyalg", "HMacSHA512", "-keysize", "256"]
        - name: directenctest
          cmd: genseckey
          args: ["-keyalg", "aes", "-keysize", "256"]
        # The sms.transport.key is used by amster to encrypt exported secrets.
        # Enabling this key significantly impacts the performance of REST and UI calls
        # This key adds marginal value in forgeops - since the exported secrets are replaced by commons expressions
        # and/or come from an external secret provider.
        # We recommend leaving this key disabled.
        # - name: sms.transport.key
        #   cmd: genseckey
        #   args: ["-keyalg", "AES", "-keysize", "128"]

        - name: configstorepwd
          cmd: importpassword
          sourcePath: am-passwords/.storepass
        - name: dsameuserpwd
          cmd: importpassword
          sourcePath: ds-passwords/dirmanager.pw

  # Amster secrets

  # amster-env-secrets secret

  - name: amster-env-secrets
    keys:
      - name: IDM_PROVISIONING_CLIENT_SECRET
        type: password
        spec:
          length: 24
      - name: IDM_RS_CLIENT_SECRET
        type: password
        spec:
          length: 24

  # amster secret

  - name: amster
    keys:
    - name: id_rsa
      # ssh generates an RSA ssh key pair, they are stored in the object as
      # `id_rsa` and `id_rsa.pub`
      type: ssh

  # ds-env-secrets secret

  - name: ds-env-secrets
    keys:
      - name: AM_STORES_APPLICATION_PASSWORD
        type: password
        spec:
          length: 32
      - name: AM_STORES_CTS_PASSWORD
        type: password
        spec:
          length: 32
      - name: AM_STORES_USER_PASSWORD
        type: password
        spec:
          length: 32

  # PingIDM secrets

  # idm-env-secrets secret

  - name: idm-env-secrets
    keys:
    - name: OPENIDM_ADMIN_PASSWORD
      type: password
      spec:
        length: 24
    - name: OPENIDM_KEYSTORE_PASSWORD
      type: password
      spec:
        length: 24

  # idm secret

  - name: idm
    keys:
    - name: keystore.jceks
      type: keytool
      spec:
        storeType: jceks
        storePassPath: idm-env-secrets/OPENIDM_KEYSTORE_PASSWORD
        keyPassPath: idm-env-secrets/OPENIDM_KEYSTORE_PASSWORD
        keytoolAliases:
        - name: openidm-sym-default
          cmd: genseckey
          args: ["-keyalg", "aes", "-keysize", "128"]
        - name: openidm-jwtsessionhmac-key
          cmd: genseckey
          args: ["-keyalg", "HmacSHA256", "-keysize", "256"]
        - name: openidm-selfservice-key
          cmd: genseckey
          args: ["-keyalg", "aes", "-keysize", "128"]
        - name: server-cert
          cmd: genkeypair
          args: ["-keyalg", "RSA", "-keysize", "2048", "-sigalg", "SHA256WITHRSA", "-validity", "3650", "-dname", "CN=server-cert,O=ForgeRock,L=Bristol,ST=Bristol,C=UK"]
        - name: selfservice
          cmd: genkeypair
          args: ["-keyalg", "RSA", "-keysize", "2048", "-sigalg", "SHA256WITHRSA", "-validity", "3650", "-dname", "CN=selfservice,O=ForgeRock,L=Bristol,ST=Bristol,C=UK"]
        - name: openidm-localhost
          cmd: genkeypair
          args: ["-keyalg", "RSA", "-keysize", "2048", "-sigalg", "SHA256WITHRSA", "-validity", "3650", "-dname", "CN=openidm-localhost,O=ForgeRock,L=Bristol,ST=Bristol,C=UK"]

  # # example of binary data
  #
  # - name: some-binary-secret
  #   keys:
  #
  #     # One of the data keys in the sms-transport-key secret is `sms.transport.key`
  #     # So you could run the command:
  #     # kubectl get secret sms-transport-key -o json | jq '.Data["sms.transport.key"]
  #
  #     - name: some.key
  #
  #       # The operator applies `spec.value` as a data key on the secret object.
  #       # This is purely a clear text value, but in a secret.
  #
  #       type: literal
  #       spec:
  #         # This value is base64-encoded for the purposes of embedding as a string.
  #         # It's used to embed binary data, like a small Java keystore.
  #         # The operator applies the value to the object _AFTER_ decoding it.
  #         isBase64: true
  #         value: |-
  #           Y2hhbmdlaXQ=
---
{{- end }}
