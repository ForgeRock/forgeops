{{ if .Values.certmanager.enabled }}
# Create a namespaced issuer that uses cert managers built in CA issuer
apiVersion: certmanager.k8s.io/v1alpha1
kind: Issuer
metadata:
  name: ca-issuer
spec:
  ca:
    secretName: certmanager-ca-secret
---
# The CA certificate secret used by cert manager to issue certs. 
apiVersion: v1
kind: Secret
metadata:
    name: certmanager-ca-secret
type: kubernetes.io/tls
data:
  tls.crt: {{ .Files.Get "secrets/ca.crt" | b64enc }}
  tls.key: {{ .Files.Get "secrets/ca.key" | b64enc }}
---
# Requests cert manager create a certificate based on the Issuer (CA, lets encrypt, etc.)
# A secret containing the cert will be created if the request is succesful. Ingress controllers
# Should reference the secret by name in their tls spec.
# We currently use a wildcard cert for each namespace.  *.namespace.domain 
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name:  wildcard.{{ .Release.Namespace }}{{ .Values.domain }}
spec:
  secretName: {{ printf "wildcard.%s%s" .Release.Namespace .Values.domain }}
  issuerRef:
    name: {{ .Values.certmanager.issuer }}
    kind: {{ default "Issuer" .Values.certmanager.issuerKind }}
  # If commonName is not provided, the first value in dnsNames is used.
  #commonName: ""
  dnsNames:
  - '*.{{ .Release.Namespace }}{{ .Values.domain }}'
  {{ if .Values.certmanager.acme -}}
  # This is used by Acme / Let's encrypt, and is ommited for CA certs.
  acme:
    config:
    - dns01:
        provider: prod-dns
      domains:
      - '*.{{ .Release.Namespace }}{{ .Values.domain }}'
  {{ end }}
  {{ end }}