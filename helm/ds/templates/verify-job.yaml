{{ if .Values.backup.verify }}
# This is an optional cron job that restores from a backup and verifies the integrity of the data.
# To create an ad hoc job you can use:
#  kubectl create job verify --from=cronjob/ds-verify
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Values.djInstance }}-verify
  labels:
    djInstance: {{ .Values.djInstance }}
    app: {{ template "fullname" . }}
    vendor: forgerock
    component: opendj
spec:
  # Hours are UTC. This is approx. 1 AM EST
  schedule: "15 5 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          # This will make sure the mounted PVCs are writable by the forgerock user with gid 111111.
          securityContext:
            fsGroup: 11111
          restartPolicy: Never
          initContainers:
          {{- if .Values.gcs.restore }}
            # An example of restoring a previous backup from a google cloud storage bucket.
            # The bucket and path must exist, and the cluster needs --scopes storage-full when it is created.
            # This runs the gsutil command to rsync the contents of the bucket to the /backup folder
          - name: gcs
            #image: gcr.io/cloud-builders/gcloud:latest
            # For release we use a pinned version
            image:  {{ .Values.gcloudImage }}
            imagePullPolicy: IfNotPresent
            command: [ "/bin/sh", "-c", "gsutil -m rsync -r {{ .Values.gcs.backupBucket }} /backup; chmod -R g+rwx /backup"]
            volumeMounts:
            - name: backup
              mountPath: /backup
            {{- end }}
          containers:
          - name: opendj
            image:  {{ .Values.image.repository }}/{{ .Values.component }}:{{ .Values.image.tag }}
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            envFrom:
            - configMapRef:
                name: {{ .Values.djInstance }}
            env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            args: ["restore-and-verify"]
            volumeMounts:
            - name: dj-secrets
              mountPath: /var/run/secrets/opendj
            - name: backup
              mountPath: /opt/opendj/bak
            - name: logs
              mountPath: /opt/opendj/logs
            - name: db
              mountPath: /opt/opendj/data
          volumes:
          - name: dj-secrets
            secret:
              secretName: {{ .Values.djInstance }}
          - name: logs
            emptyDir: {}
          {{- if or .Values.backup.enabled .Values.restore.enabled }}
          - name: backup
            persistentVolumeClaim: 
              claimName: {{ default (printf "bak-%s" .Values.djInstance) .Values.backup.pvcName }}
          {{ else }}
          - name: backup
            emptyDir: {}
          {{ end }}
          - name: db
            persistentVolumeClaim:
              claimName: {{ .Values.djInstance }}-verify
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.djInstance }}-verify
  annotations:
    pv.beta.kubernetes.io/gid: "11111"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ default "5Gi"  .Values.storageSize }}
  {{- if .Values.storageClass }}
  storageClassName:  {{ .Values.storageClass }}
  {{- end }}
{{end}}