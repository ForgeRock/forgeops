{{ if .Values.haproxy.enabled }}
# Haproxy - experimental
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: {{  .Values.djInstance }}-haproxy
spec:
  replicas: {{ .Values.haproxy.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}-haproxy
        component: proxy
        vendor: forgerock
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: haproxy
        image: haproxy:1.8-alpine
        imagePullPolicy:  IfNotPresent
      # todo: pull the util image scripts into a generic alpine image. Use a configmap for the scripts
        volumeMounts:
        - name: haproxy
          mountPath: /usr/local/etc/haproxy
      volumes:
      - name: haproxy
        configMap:
          name: {{ .Values.djInstance }}-haproxy 
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.djInstance }}-haproxy
  labels:
    app: {{ .Values.djInstance }}
    component: {{ .Values.component }}
    vendor: forgerock
    heritage: {{ .Release.Service }}
spec:
  ports:
    - port: 1389
      name: ldap
      targetPort: 1389
    - port: 1636
      name: ldaps
      targetPort: 1636
  selector:
    app: {{ template "name" . }}-haproxy
    release: {{ .Release.Name }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.djInstance }}-haproxy
data:
  haproxy.cfg: |
    global
            daemon
            # Note that logging is not working. This requires a new haproxy docker image
            # that can forward syslog to the containers stdout.
            # See https://github.com/docker-library/haproxy/pull/39 
            # user haproxy
            # group haproxy
            # log 127.0.0.1 local2
            #maxconn 30000
            #ulimit-n 65536
            #nbproc 2
            #cpu-map 1 0
            #cpu-map 2 1
            # debug 
            stats bind-process
            # turn on stats unix socket
            stats socket /var/tmp/stats

    defaults
            mode tcp
            timeout connect 5000ms
            timeout client 50000ms
            timeout server 50000ms
            log global
            #option httplog
            #option dontlognull
            #option dontlog-normal

    frontend ldap
            bind *:1389
            log global
            mode tcp
            option socket-stats
            option tcpka
            timeout client 5s
            default_backend ldap

    backend ldap
            balance leastconn
            #balance roundrobin
            mode tcp
            option tcpka
            # init-addr prevents haproxy from exiting if the hosts are not up (which is the case when starting)
            # todo: An option here is to let haproxy bootloop until the instances are available
            {{- $r := .Values.replicas | int -}}
            {{- $dj := .Values.djInstance -}}
            {{- range $i, $e := until $r }}
            {{ printf "server ds%d %s-%d.%s:1389 check port 1389 init-addr last,libc,none" $i $dj $i $dj }} 
            {{- end }}
            stick match src
            stick-table type ip size 1k expire 30m
            timeout server 2s
            timeout connect 2s

    listen stats
            bind  *:9000
            mode http
            balance
            stats enable
            stats hide-version
            stats realm Haproxy\ Statistics
            stats uri /
            stats auth admin:password
            #stats scope .
{{ end }}
