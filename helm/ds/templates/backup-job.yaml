{{ if .Values.backup.enabled }}
# Cron job that backs up the directory and optionally rsyncs
# the contents of the backup PVC to a gcs storage bucket
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Values.djInstance }}-bak
  labels:
    djInstance: {{ .Values.djInstance }}
    app: {{ template "fullname" . }}
    vendor: forgerock
    component: opendj
spec:
  schedule: "{{ .Values.backup.schedule }}"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          initContainers:
          # Backup to the bak/ folder
          - name: backup
            image:  {{ .Values.image.repository }}/{{ .Values.component }}:{{ .Values.image.tag }}
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            args: [ "/opt/opendj/scripts/backup.sh", "--incremental"]
            env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            envFrom:
            - configMapRef:
                name: {{ .Values.djInstance }}
            volumeMounts:
            - name: backup
              mountPath: /opt/opendj/bak
            - name: dj-secrets
              mountPath: /var/run/secrets/opendj
          {{ if .Values.gcs.backup }}
          # Backup to gcs cloud storage using rsync.
          # The bucket and path must exist, and the cluster needs --scopes storage-full when it is created.
          # This runs the gsutil command to rsync the contents of the /backup folder (shared with the DJ container) to cloud storage. 
          - name: gcs
            image: {{ .Values.gcloudImage }}
            imagePullPolicy: IfNotPresent
            command: [ "/bin/sh", "-c", "gsutil -m rsync -r /backup {{ .Values.gcs.backupBucket }}"]
            volumeMounts:
            - name: backup
              mountPath: /backup
          {{ end }}
          containers:
          # A job needs at least one container. This is just a dummy echo command.
          - name: echo
            image: busybox 
            args: ["echo", "done"]
          volumes:
          {{- if or .Values.backup.enabled .Values.restore.enabled }}
          - name: backup
            persistentVolumeClaim: 
              claimName: {{ default (printf "bak-%s" .Values.djInstance) .Values.backup.pvcName }}
          {{ else }}
          - name: backup
            emptyDir: {}
          {{ end }}
          - name: dj-secrets
            secret:
              secretName: {{ .Values.djInstance }}
{{- end }}

