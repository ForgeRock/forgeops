#!/usr/bin/env python3
"""Manage images in a ForgeRock deployment"""

import argparse
from copy import copy
from copy import deepcopy
import datetime
import os
import json
from pathlib import Path
import sys
import site
import textwrap

file_name = Path(__file__)
current_file_path = file_name.parent.resolve()
root_dir = [parent_path for parent_path in current_file_path.parents if (parent_path / 'README.md').exists()][0]
dependencies_dir = os.path.join(root_dir, 'lib', 'dependencies')
# Insert lib folders to python path
sys.path.insert(0, str(root_dir))
sys.path.insert(1, str(dependencies_dir) + site.USER_SITE.replace(site.USER_BASE, ''))

from lib.python.ensure_configuration_is_valid_or_exit import print_how_to_install_dependencies
try:
    import yaml
    from mergedeep import merge
except:
    print_how_to_install_dependencies()
import lib.python.utils as utils


# Avoid using anchors/aliases in outputted YAML
# Notice we call this with yaml.dump, but we are still using safe_dump
# From https://ttl255.com/yaml-anchors-and-aliases-and-how-to-disable-them/
class NoAliasDumper(yaml.SafeDumper):
    def ignore_aliases(self, data):
        return True


# Setup a custom argparse formatter so we can use multiple formatters
class Formatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter):
    pass


def writeYamlFile(data, file):
    """Write an object to a yaml file"""
    with open(file, 'w') as f:
        yaml.dump(data, f, sort_keys=False, Dumper=NoAliasDumper)


def containsElement(search, target):
    """Check to see if search list contains at least one element from target list"""
    if any(c in target for c in search):
        return True
    return False


def get_releases(release_src, components):
    """ Get the list of available releases """
    releases = {}
    for c in components:
        with open(release_src / f"{c}.json") as f:
            data = json.load(f)
            releases[c] = data['releases']
    return releases


def parse_release_str(rel_str):
    """ Split the release string, and setup a map of different release strings. """

    alt_releases = ['dev']
    release = {
        'major': 0,
        'minor': 0,
        'patch': 0,
    }
    if rel_str.count('.') == 0:
        release['major'] = rel_str
    elif rel_str.count('.') == 1:
        release['major'] = int(rel_str.split('.')[0])
        release['minor'] = int(rel_str.split('.')[1])
    elif rel_str.count('.') == 2:
        release['major'] = int(rel_str.split('.')[0])
        release['minor'] = int(rel_str.split('.')[1])
        release['patch'] = int(rel_str.split('.')[2])

    if rel_str in alt_releases:
        release['maj_min'] = rel_str
        release['full'] = rel_str
    else:
        release['major'] = int(release['major'])
        release['maj_min'] = f"{release['major']}.{release['minor']}"
        release['full'] = f"{release['maj_min']}.{release['patch']}"

    return release


def select_tag(component, releases, release, image_names, tag=None):
    """ Select the best tag based on the component, release, and/or tag. """

    major = release['major']
    minor = release['minor']
    patch = release['patch']
    full = release['full']
    maj_min = release['maj_min']
    selected_tag = None

    if 'target' not in release.keys():
        release['target'] = full
    target = release['target']

    if maj_min in releases[component].keys():
        if 'component_name' in releases[component][maj_min]:
            image_names[component] = releases[component][maj_min]['component_name']
        if full in releases[component][maj_min].keys():
            if tag in releases[component][maj_min][full]['tags']:
                selected_tag = tag
            else:
                selected_tag = releases[component][maj_min][full]['tags'][-1]
        elif patch > 0:
            patch_new = patch - 1
            full_new = f"{maj_min}.{patch_new}"
            release_new = deepcopy(release)
            release_new['patch'] = patch_new
            release_new['full'] = full_new
            selected_tag = select_tag(component, releases, release_new, tag)
    else:
        utils.exit_msg(f"Invalid release {target}. Only supports releases 7.4+.")

    return selected_tag


def set_image(image_name, tag, repo=None):
    """ Create a dictionary entry for a component image """
    data = { 'image': {} }
    data['image']['repository'] = f"{repo}/{image_name}" if repo else image_name
    if tag:
        data['image']['tag'] = tag
    return data


def write_release_files(tags, repo, docker_path, release_file, image_names):
    """ Write a release files """

    for c in tags.keys():
        # Skip ui images as we don't support building those
        if 'ui' in c:
            continue
        releases_path = docker_path / c / 'releases'
        if c == 'ds':
            releases_path = docker_path / c / 'ds-new' / 'releases'
        if not releases_path.exists():
            os.makedirs(releases_path)

        image_name = image_names[c]
        release_path = releases_path / release_file
        content = f"REPO={repo}/{image_name}\nTAG={tags[c]}"
        with open(release_path, 'w') as f:
            f.write(f"{content}\n")


def update_image_defaulter(images, overlay_path):
    """ Update the image-defaulter """

    for image_name in images.keys():
        name = f".*{image_name}.*"
        if image_name in ['am', 'ds']:
            name = f".*{image_name}:.*"
        image = f"{images[image_name]['image']['repository']}"
        if 'tag' in images[image_name]['image'].keys():
            image = f"{image}:{images[image_name]['image']['tag']}"
        cmd_args = f"edit set image '{name}={image}'"
        utils.run('kustomize', cmd_args, cwd=f"{overlay_path}/image-defaulter")

        if image_name == 'end-user-ui':
            name = '.*enduser-ui.*'
            cmd_args = f"edit set image '{name}={image}'"
            utils.run('kustomize', cmd_args, cwd=f"{overlay_path}/image-defaulter")


def main():
    prog = 'forgeops-ng image'
    components_apps = ['am', 'amster', 'idm']
    components_ui = ['admin-ui', 'end-user-ui', 'login-ui']
    components_platform = sum([components_apps, ['ds'], components_ui], [])
    components_meta = ['platform', 'apps', 'ui']
    components_valid = sum([components_meta, components_platform, ['ig']], [])
    components_valid.append([])

    forgeops_public_url = 'us-docker.pkg.dev/forgeops-public'
    base_repo_dev = "gcr.io/forgerock-io"
    base_repo_def = f"{forgeops_public_url}/images-base"
    config_repo_def = f"{forgeops_public_url}/images"

    help_examples=f"""
examples:
# Set a custom component image in the prod env for am (used by build command)
{prog} --env-name prod --push-to gcr.io/my-project/idp --tag 7.5.0 am

# Copy images from one env to another (prod-single to prod)
{prog} --env-name prod --source prod-single --copy

# Select an official release for doing builds for platform components
{prog} --release 7.5.1 platform

# Select an official release for doing builds with a custom release name for platform components
{prog} --release 7.5.1 --release-name 7.5.1-2 platform

# Select an official release for an env for platform components
{prog} --release 7.5.1 --env-name prod platform

# Select an official IG release with a custom release name
{prog} --release 2024.6.3 --release-name 2024.6.3-1 ig
"""

    parser = argparse.ArgumentParser(description='Manage images in a Ping Identity Platform (PIP) environment',
                                     prog=prog,
                                     epilog=textwrap.dedent(help_examples),
                                     formatter_class=Formatter)
    parser.add_argument('-d', '--debug', action='store_true', help='Turn on debugging')
    parser.add_argument('components', nargs='*', choices=components_valid)
    parser.add_argument('-k', '--kustomize', default=argparse.SUPPRESS,
                        help='Kustomize dir to use [absolute or relative to forgeops root] (default: kustomize)')
    parser.add_argument('-b', '--build-path', default=argparse.SUPPRESS,
                        help='Docker dir to use [absolute or relative to forgeops root] (default: docker)')
    parser.add_argument('-H', '--helm', default=argparse.SUPPRESS,
                        help='Dir to store helm values files [absolute or relative to forgeops root] (default: helm)')
    parser.add_argument('-e', '--env-name', help='Name of environment to manage')
    parser.add_argument('-s', '--source', help='Name of source environment')
    parser.add_argument('-r', '--push-to', help='Container registry to use for images')
    parser.add_argument('-t', '--tag', help='Set the tag used for images')
    parser.add_argument('--no-helm', action='store_true', help="Don't manage helm values files")
    parser.add_argument('--no-kustomize', action='store_true', help="Don't manage kustomize overlay")
    parser.add_argument('--copy', action='store_true', help='Copy images from --source to --env-name')
    parser.add_argument('--release', help='Specify platform image release to set (eg. 7.5.1)')
    parser.add_argument('--release-file', default=argparse.SUPPRESS, help='Name of release file in docker/component/releases (default: $RELEASE-$DATETIME in UTC)')
    parser.add_argument('--base-repo', default=argparse.SUPPRESS, help=f"URL for base image container repo (default: {base_repo_def})")
    parser.add_argument('--config-repo', default=argparse.SUPPRESS, help=f"URL for config image container repo (default: {config_repo_def})")
    parser.add_argument('--same-repo', action='store_true', help='Use base URL for both container repos')
    # Needed to be called from bin/forgeops, but ignored
    parser.add_argument('--dryrun', action='store_true', help=argparse.SUPPRESS)
    parser.add_argument('--verbose', action='store_true', help=argparse.SUPPRESS)

    args = parser.parse_args()
    if args.debug:
        print(args)

    if args.copy and args.release:
        utils.exit_msg('You can only provide --copy or --release, not both.')

    if args.copy and not args.source:
        utils.exit_msg('You must supply a source (-s) when using --copy.')

    if not args.copy and not args.components:
        utils.exit_msg('You must supply at least one component to update when not using --copy.')

    if not args.release and not args.env_name:
        utils.exit_msg('An environment name (--env-name) is required for this operation.')

    update_config_images = True
    if (args.release and not args.env_name) or args.copy:
        update_config_images = False

    base_image_names = {
        'am': 'am',
        'amster': 'amster',
        'ds': 'ds',
        'idm': 'idm',
        'ig': 'ig',
        'admin-ui': 'admin-ui',
        'end-user-ui': 'end-user-ui',
        'login-ui': 'login-ui',
    }

    components = copy(args.components)
    if containsElement(['platform'], components):
        components.extend(components_platform)
        components.remove('platform')
    if containsElement(['apps'], components):
        components.extend(components_apps)
        components.remove('apps')
    if containsElement(['ui'], components):
        components.extend(components_ui)
        components.remove('ui')
    # Use set() to remove duplicates from components
    components = list(set(components))

    if args.debug:
        print(f"components = {components}")

    script_path = Path(__file__).parent
    if args.debug: print(f'script_path = {script_path}')
    root_path = script_path.parent.parent
    if args.debug: print(f'root_path = {root_path}')
    # Temporary local file, will be hosted via http
    release_src = root_path / 'releases'

    # Setup defaults for values that can be set in forgeops-ng.conf
    helm = 'helm'
    if getattr(args, 'helm', None):
        helm = args.helm
    elif os.getenv('HELM_PATH'):
        helm = os.getenv('HELM_PATH')

    kustomize = 'kustomize-ng'
    if getattr(args, 'kustomize', None):
        kustomize = args.kustomize
    elif os.getenv('KUSTOMIZE_PATH'):
        kustomize = os.getenv('KUSTOMIZE_PATH')

    docker_path = 'docker'
    if getattr(args, 'build_path', None):
        docker_path = args.build_path
    elif os.getenv('BUILD_PATH'):
        docker_path = os.getenv('BUILD_PATH')

    if Path(docker_path).is_absolute():
        docker_path = Path(docker_path)
    else:
        docker_path = root_path / docker_path
    if args.debug:
        print(f"docker_path={docker_path}")
    if not docker_path.is_dir():
        utils.exit_msg(f"Build path ({docker_path}) isn't a dir or doesn't exist")

    push_to = None
    if args.push_to:
        push_to = args.push_to if args.push_to.lower() != 'none' else None
    elif os.getenv('PUSH_TO'):
        push_to = os.getenv('PUSH_TO')

    do_helm = True
    if args.no_helm or os.getenv('NO_HELM') == 'true':
        do_helm = False

    do_kustomize = True
    if args.no_kustomize or os.getenv('NO_KUSTOMIZE') == 'true':
        do_kustomize = False
    # End defaults setup

    if Path(kustomize).is_absolute():
        kustomize_path = Path(kustomize)
    else:
        kustomize_path = root_path / kustomize
    if args.debug:
        print(f"kustomize_path={kustomize_path}")
    if not kustomize_path.is_dir():
        utils.exit_msg(f"Kustomize dir ({kustomize_path}) isn't a dir or doesn't exist")

    if Path(helm).is_absolute():
        helm_root = Path(helm)
    else:
        helm_root = root_path / helm
    helm_path = helm_root / args.env_name if args.env_name else None
    if args.debug:
        print(f"helm_path={helm_path}")

    base_repo = copy(base_repo_def)
    if getattr(args, 'base_repo', None):
        base_repo = args.base_repo
    elif os.getenv('BASE_REPO') is not None:
        base_repo = os.getenv('BASE_REPO')

    config_repo = copy(config_repo_def)
    if getattr(args, 'config_repo', None):
        config_repo = args.config_repo
    elif os.getenv('CONFIG_REPO') is not None:
        config_repo = os.getenv('CONFIG_REPO')

    if args.same_repo and args.base_repo:
        config_repo = base_repo
    elif args.same_repo and not args.base_repo:
        utils.exit_msg('Must provide --base-repo with --same-repo')

    releases = {}
    release = {}
    release_tags = {}
    if args.release:
        timestamp = datetime.datetime.now(datetime.timezone.utc).strftime("%Y%m%d_%H%M%S")
        release_file = f"{args.release}-{timestamp}"
        if getattr(args, 'release_file', None):
            release_file = args.release_file
        if args.release == 'dev':
          base_repo = base_repo_dev

        releases = get_releases(release_src, components)
        release = parse_release_str(args.release)
        for c in components:
            release_tags[c] = select_tag(c, releases, release, base_image_names, args.tag)

        write_release_files(release_tags, base_repo, docker_path, release_file, base_image_names)

    values_images = {}
    images_kustomize = {}
    if update_config_images:
        repo = push_to
        if args.release:
            repo = config_repo
        tag = args.tag
        for component in components:
            if args.release:
                tag = 'dev' if args.release == 'dev' else release_tags[component]
            if component == 'ds':
                values_images['ds_cts'] = set_image(component, tag, repo)
                values_images['ds_idrepo'] = set_image(component, tag, repo)
                images_kustomize[component] = set_image(component, tag, repo)
            else:
                values_images[component.replace('-', '_')] = set_image(component, tag, repo)
                images_kustomize[component] = set_image(component, tag, repo)

    if do_kustomize:
        overlay_root = kustomize_path / 'overlay'
        if not overlay_root.is_dir():
            utils.exit_msg(f"Overlay root ({overlay_root}) isn't a dir or doesn't exist")
        overlay_path = overlay_root / args.env_name if args.env_name else overlay_root
        if args.debug:
            print(f"overlay_path={overlay_path}")

        if args.copy:
            source_path = None
            if Path(args.source).is_absolute():
                source_path = Path(args.source)
            else:
                source_path = overlay_root / args.source
            if args.debug:
                print(f"source_path={source_path}")

            src_overlay_path = overlay_root / args.source
            if args.debug:
                print(f"src_overlay_path={src_overlay_path}")

            img_def_fn = 'image-defaulter/kustomization.yaml'
            if not overlay_path.exists():
                utils.exit_msg(f'{overlay_path} does not exist. Run forgeops-ng env to create it.')
            if not src_overlay_path.exists():
                utils.exit_msg(f'{src_overlay_path} does not exist. Run forgeops-ng env to create it.')
            img_kust = overlay_path / img_def_fn
            src_img_kust = src_overlay_path / img_def_fn
            img_kust.write_bytes(src_img_kust.read_bytes())

        if update_config_images:
            print(f"Updating image-defaulter in {args.env_name} overlay")
            update_image_defaulter(images_kustomize, overlay_path)

    if do_helm and args.env_name:
        values_fn = 'values.yaml'
        values_file = helm_path / values_fn

        if values_file.is_file():
            print('Updating existing helm values.')
        else:
            utils.exit_msg(f'Helm environment ({args.env_name}) not populated. Run forgeops-ng env to populate.')

        values = {}
        values = yaml.safe_load(open(values_file))

        if args.copy:
            src_helm_path = helm_root / args.source
            if args.debug:
                print(f"src_helm_path={src_helm_path}")

            src_values_file = src_helm_path / values_fn
            if src_values_file.is_file():
                print(f"Reading in values from {src_values_file}")
            else:
                utils.exit_msg(f'Source environment ({src_helm_path}) not populated. Run forgeops-ng env to populate.')

            src_images = {}
            src_values = {}
            src_values = yaml.safe_load(open(src_values_file))
            for k,v in enumerate(src_values):
                if 'image' in v:
                    src_images[k] = { 'image': v }
            merge(values_images, src_values)

        merge(values, values_images)
        writeYamlFile(values, values_file)

    ###
    ### Logs
    ###
    timestamp = datetime.datetime.now(datetime.timezone.utc).strftime("%Y%m%d-%H:%M:%S%z")
    cmd_ary = sys.argv
    cmd_ary[0] = prog
    cmd = ' '.join(cmd_ary)
    log_action = 'Update'
    log_file = 'env.log'
    log_line = f"{timestamp} {log_action} {cmd}"
    if do_kustomize and args.copy:
        log_path_overlay = overlay_path / log_file
        with open(log_path_overlay, 'a') as log_overlay_f:
            log_overlay_f.write(f"{log_line}\n")
    if do_helm and args.env_name:
        log_path_helm = helm_path / log_file
        with open(log_path_helm, 'a') as log_helm_f:
            log_helm_f.write(f"{log_line}\n")


if __name__ == '__main__':
    main()
