#!/usr/bin/env python3
"""Manage images in a ForgeOps deployment"""

import argparse
from copy import copy
from copy import deepcopy
import datetime
import os
import json
from pathlib import Path
import sys
import site
import textwrap

file_name = Path(__file__)
current_file_path = file_name.parent.resolve()
root_path = [parent_path for parent_path in current_file_path.parents if (parent_path / 'README.md').exists()][0]
dependencies_dir = os.path.join(root_path, 'lib', 'dependencies')
# Insert lib folders to python path
sys.path.insert(0, str(root_path))
sys.path.insert(1, str(dependencies_dir) + site.USER_SITE.replace(site.USER_BASE, ''))

from lib.python.ensure_configuration_is_valid_or_exit import print_how_to_install_dependencies
try:
    import yaml
    from mergedeep import merge
except:
    print_how_to_install_dependencies()
import lib.python.utils as utils
from lib.python.releases import (
    BASE_REPO_DEF,
    BASE_REPO_DEV,
    DEPLOY_REPO_DEF,
    BASE_IMAGE_NAMES,
    RELEASES_SRC_DEF,
    get_releases,
    parse_release_str,
    select_tag,
    set_image,
    select_image_repo
)


# Avoid using anchors/aliases in outputted YAML
# Notice we call this with yaml.dump, but we are still using safe_dump
# From https://ttl255.com/yaml-anchors-and-aliases-and-how-to-disable-them/
class NoAliasDumper(yaml.SafeDumper):
    def ignore_aliases(self, data):
        return True


# Setup a custom argparse formatter so we can use multiple formatters
class Formatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter):
    pass


def writeYamlFile(data, file):
    """Write an object to a yaml file"""
    with open(file, 'w') as f:
        yaml.dump(data, f, sort_keys=False, Dumper=NoAliasDumper)


def containsElement(search, target):
    """Check to see if search list contains at least one element from target list"""
    if any(c in target for c in search):
        return True
    return False


def write_release_names(tags, repo, build_path, release_name, image_names):
    """ Write a release files """

    for c in tags.keys():
        # Skip ui images as we don't support building those
        if 'ui' in c:
            continue
        releases_path = build_path / c / 'releases'
        if not releases_path.exists():
            os.makedirs(releases_path)

        image_name = image_names[c]
        release_path = releases_path / release_name
        content = f"REPO={repo}/{image_name}\nTAG={tags[c]}"
        with open(release_path, 'w') as f:
            f.write(f"{content}\n")


def update_image_defaulter(images, overlay_path):
    """ Update the image-defaulter """

    for image_name in images.keys():
        name = f".*{image_name}.*"
        if image_name in ['am', 'ds']:
            name = f".*{image_name}:.*"
        image = f"{images[image_name]['image']['repository']}"
        if 'tag' in images[image_name]['image'].keys():
            image = f"{image}:{images[image_name]['image']['tag']}"
        cmd_args = f"edit set image '{name}={image}'"
        utils.run('kustomize', cmd_args, cwd=f"{overlay_path}/image-defaulter")

        if image_name == 'end-user-ui':
            name = '.*enduser-ui.*'
            cmd_args = f"edit set image '{name}={image}'"
            utils.run('kustomize', cmd_args, cwd=f"{overlay_path}/image-defaulter")


def main():
    prog = 'forgeops image'
    components_apps = ['am', 'amster', 'idm']
    components_ui = ['admin-ui', 'end-user-ui', 'login-ui']
    components_platform = sum([components_apps, ['ds'], components_ui], [])
    components_meta = ['platform', 'apps', 'ui']
    components_valid = sum([components_meta, components_platform, ['ig']], [])
    components_valid.append([])

    help_epilog=f"""
--image-repo shorthand repos and their defaults:
base = {BASE_REPO_DEF}
deploy = {DEPLOY_REPO_DEF}
dev = {BASE_REPO_DEV}

examples:
# Set a custom component image in the prod env for am (used by build command)
{prog} --env-name prod --image-repo my-container-repo/idp --tag 7.5.0 am

# Copy images from one env to another (prod-single to prod)
{prog} --env-name prod --source prod-single --copy

### Manage release files for use with `forgeops build --release-name $RELEASE_NAME`
# Manage release files for the entire platform (generated release name is 7.5.1-DATETIME)
{prog} --release 7.5.1 platform

# Manage release files with a custom release name for the entire platform
{prog} --release 7.5.1 --release-name 7.5.1-2 platform

# Manage an official PingGateway release with a custom release name
{prog} --release 2024.6.3 --release-name 2024.6.3-1 ig

### Update Helm values.yaml and Kustomize overlay to use deployable images
### Needed for demos and initial setup
# Select an official release for an env for platform components
{prog} --release 7.5.1 --env-name ig-sfo1 platform

# Select an official PingGateway release for an env
{prog} --release 7.5.1 --env-name ig-dfw1 ig
"""

    parser = argparse.ArgumentParser(description='Manage images in a Ping Identity Platform (PIP) environment',
                                     prog=prog,
                                     epilog=textwrap.dedent(help_epilog),
                                     formatter_class=Formatter)
    parser.add_argument('-d', '--debug', action='store_true', help='Turn on debugging')
    parser.add_argument('components', nargs='*', choices=components_valid)
    parser.add_argument('-k', '--kustomize-path', default=argparse.SUPPRESS,
                        help='Kustomize dir to use [absolute or relative to forgeops root] (default: kustomize)')
    parser.add_argument('-b', '--build-path', default=argparse.SUPPRESS,
                        help='Docker dir to use [absolute or relative to forgeops root] (default: docker)')
    parser.add_argument('-H', '--helm-path', default=argparse.SUPPRESS,
                        help='Dir to store Helm values files [absolute or relative to forgeops root] (default: helm)')
    parser.add_argument('-e', '--env-name', help='Name of environment to manage')
    parser.add_argument('-s', '--source', help='Name of source environment')
    parser.add_argument('-t', '--tag', help='Set the tag used for images')
    parser.add_argument('--no-helm', action='store_true', help="Don't manage Helm values files")
    parser.add_argument('--no-kustomize', action='store_true', help="Don't manage Kustomize overlay")
    parser.add_argument('--copy', action='store_true', help='Copy images from --source to --env-name')
    parser.add_argument('--release', help='Specify platform image release to set (eg. 7.5.1)')
    parser.add_argument('--release-name', default=argparse.SUPPRESS, help='Name of release file in docker/component/releases (default: $RELEASE-$DATETIME in UTC)')
    parser.add_argument('--releases-src', default=argparse.SUPPRESS, help=f"URL or path where release files live (default: {RELEASES_SRC_DEF})")
    parser.add_argument('-r', '--image-repo', default=argparse.SUPPRESS, help=f"Container registry URL to use (defaults: see below)")
    # Needed to be called from bin/forgeops, but ignored
    parser.add_argument('--dryrun', action='store_true', help=argparse.SUPPRESS)
    parser.add_argument('--verbose', action='store_true', help=argparse.SUPPRESS)

    args = parser.parse_args()
    if args.debug:
        print(args)

    if args.copy and args.release:
        utils.exit_msg('You can only provide --copy or --release, not both.')

    if args.copy and not args.source:
        utils.exit_msg('You must supply a source (-s) when using --copy.')

    if not args.copy and not args.components:
        utils.exit_msg('You must supply at least one component to update when not using --copy.')

    if getattr(args, 'image_repo', None) and not args.copy and not args.release and not args.env_name:
        utils.exit_msg('You must supply --env-name when not doing a copy or a release')

    if getattr(args, 'release_name', None) and not args.release:
        utils.exit_msg('You must supply --release when using --release-name.')

    build = getattr(args, 'build_path', None)
    helm = getattr(args, 'helm_path', None)
    kustomize = getattr(args, 'kustomize_path', None)
    releases_source = getattr(args, 'releases_src', None)
    (helm_root,
        kustomize_path,
        build_path,
        overlay_root,
        do_helm,
        do_kustomize,
        releases_src) = utils.process_overrides(root_path,
                                                 helm,
                                                 kustomize,
                                                 build,
                                                 args.no_helm,
                                                 args.no_kustomize,
                                                 releases_source)
    helm_path = helm_root / args.env_name if args.env_name else None

    if args.debug:
        print(f"build_path={build_path}")
        print(f"helm_path={helm_path}")
        print(f"kustomize_path={kustomize_path}")
        print(f"overlay_root={overlay_root}")
        print(f"releases_src={releases_src}")
    if not build_path.is_dir():
        utils.exit_msg(f"Build path ({build_path}) isn't a dir or doesn't exist")
    if do_kustomize and not kustomize_path.is_dir():
        utils.exit_msg(f"Kustomize dir ({kustomize_path}) isn't a dir or doesn't exist")
    if do_helm and helm_path is not None and not helm_path.is_dir():
        utils.exit_msg(f"Helm dir ({helm_path}) isn't a dir or doesn't exist")

    components = copy(args.components)
    if containsElement(['platform'], components):
        components.extend(components_platform)
        components.remove('platform')
    if containsElement(['apps'], components):
        components.extend(components_apps)
        components.remove('apps')
    if containsElement(['ui'], components):
        components.extend(components_ui)
        components.remove('ui')
    # Use set() to remove duplicates from components
    components = list(set(components))

    if args.debug:
        print(f"components = {components}")

    repo = select_image_repo(args.release, getattr(args, 'image_repo', None),
                                 getattr(args, 'env_name', None))

    update_config_images = True
    update_docker_files = False
    if (args.release and not args.env_name) or args.copy:
        update_config_images = False
        if args.release:
            update_docker_files = True

    releases = {}
    release = {}
    release_tags = {}
    timestamp = None
    if args.release:
        timestamp = datetime.datetime.now(datetime.timezone.utc).strftime("%Y%m%d_%H%M%S")
        release_name = f"{args.release}-{timestamp}"
        if getattr(args, 'release_name', None):
            release_name = args.release_name
        if args.release == 'dev':
            repo = BASE_REPO_DEV

        releases = get_releases(releases_src, components)
        release = parse_release_str(args.release)
        image_names = copy(BASE_IMAGE_NAMES)
        for c in components:
            release_tags[c], image_names = select_tag(c, releases, release, image_names, args.tag)

        if update_docker_files:
            print(f"Updating release file(s) for docker builds [{release_name}]")
            write_release_names(release_tags, repo, build_path, release_name, image_names)

    values_images = {}
    images_kustomize = {}
    if update_config_images:
        tag = args.tag
        for component in components:
            if args.release:
                tag = 'dev' if args.release == 'dev' else release_tags[component]
            if component == 'ds':
                values_images['ds_cts'] = set_image(component, tag, repo)
                values_images['ds_idrepo'] = set_image(component, tag, repo)
                images_kustomize[component] = set_image(component, tag, repo)
            else:
                values_images[component.replace('-', '_')] = set_image(component, tag, repo)
                images_kustomize[component] = set_image(component, tag, repo)

    if do_kustomize:
        overlay_root = kustomize_path / 'overlay'
        if not overlay_root.is_dir():
            utils.exit_msg(f"Overlay root ({overlay_root}) isn't a dir or doesn't exist")
        overlay_path = overlay_root / args.env_name if args.env_name else overlay_root
        if not overlay_path.is_dir():
            utils.exit_msg(f"Overlay path ({overlay_path}) isn't a dir or doesn't exist")
        if args.debug:
            print(f"overlay_path={overlay_path}")

        if args.copy:
            source_path = None
            if Path(args.source).is_absolute():
                source_path = Path(args.source)
            else:
                source_path = overlay_root / args.source
            if args.debug:
                print(f"source_path={source_path}")

            src_overlay_path = overlay_root / args.source
            if args.debug:
                print(f"src_overlay_path={src_overlay_path}")

            img_def_fn = 'image-defaulter/kustomization.yaml'
            if not overlay_path.exists():
                utils.exit_msg(f'{overlay_path} does not exist. Run forgeops env to create it.')
            if not src_overlay_path.exists():
                utils.exit_msg(f'{src_overlay_path} does not exist. Run forgeops env to create it.')
            img_kust = overlay_path / img_def_fn
            src_img_kust = src_overlay_path / img_def_fn
            img_kust.write_bytes(src_img_kust.read_bytes())

        if update_config_images:
            print(f"Updating image-defaulter in {args.env_name} overlay")
            update_image_defaulter(images_kustomize, overlay_path)

    if do_helm and args.env_name:
        values_fn = 'values.yaml'
        values_file = helm_path / values_fn

        if values_file.is_file():
            print('Updating existing helm values.')
        else:
            utils.exit_msg(f'Helm environment ({args.env_name}) not populated. Run forgeops env to populate.')

        values = {}
        values = yaml.safe_load(open(values_file))

        if args.copy:
            src_helm_path = helm_root / args.source
            if args.debug:
                print(f"src_helm_path={src_helm_path}")

            src_values_file = src_helm_path / values_fn
            if src_values_file.is_file():
                print(f"Reading in values from {src_values_file}")
            else:
                utils.exit_msg(f'Source environment ({src_helm_path}) not populated. Run forgeops env to populate.')

            src_images = {}
            src_values = {}
            src_values = yaml.safe_load(open(src_values_file))
            for k,v in enumerate(src_values):
                if 'image' in v:
                    src_images[k] = { 'image': v }
            merge(values_images, src_values)

        merge(values, values_images)
        writeYamlFile(values, values_file)

    ###
    ### Logs
    ###
    timestamp = datetime.datetime.now(datetime.timezone.utc).strftime("%Y%m%d-%H:%M:%S%z")
    cmd_ary = sys.argv
    cmd_ary[0] = prog
    cmd = ' '.join(cmd_ary)
    log_action = 'Update'
    log_file = 'env.log'
    log_line = f"{timestamp} {log_action} {cmd}"
    if do_kustomize and args.copy:
        log_path_overlay = overlay_path / log_file
        with open(log_path_overlay, 'a') as log_overlay_f:
            log_overlay_f.write(f"{log_line}\n")
    if do_helm and args.env_name:
        log_path_helm = helm_path / log_file
        with open(log_path_helm, 'a') as log_helm_f:
            log_helm_f.write(f"{log_line}\n")


if __name__ == '__main__':
    main()
