#!/usr/bin/env python3
"""Manage an environment for a ForgeRock deployment"""

import argparse
import datetime
import site
import os
from pathlib import Path
import shutil
import sys
file_name = Path(__file__)
current_file_path = file_name.parent.resolve()
root_dir = [parent_path for parent_path in current_file_path.parents if (parent_path / 'README.md').exists()][0]
dependencies_dir = os.path.join(root_dir, 'lib', 'dependencies')
# Insert lib folders to python path
sys.path.insert(0, str(root_dir))
sys.path.insert(1, str(dependencies_dir) + site.USER_SITE.replace(site.USER_BASE, ''))

# First ensure configure has been executed
from lib.python.ensure_configuration_is_valid_or_exit import ensure_configuration_is_valid_or_exit
try:
    ensure_configuration_is_valid_or_exit()
except Exception as e:
    try:
        print(f'[error] {e.__str__()}')
    except:
        raise e
    sys.exit(1)

try:
    import yaml
    from mergedeep import merge
except:
    print(f'[error] can not load python libraries. Try to run "bin/forgeops-ng configure" and re-run your command')
    sys.exit(1)
import bin.utils as utils


def genDsConnection(name, num, port=1636):
    """Generate a DS connection string to put into base/platform-config.yaml"""

    str=f"{name}-0.{name}:{port}"
    for i in range(1,num-1):
        str += f",{name}-{i}.{name}:{port}"
    return str

# Avoid using anchors/aliases in outputted YAML
# Notice we call this with yaml.dump, but we are still using safe_dump
# From https://ttl255.com/yaml-anchors-and-aliases-and-how-to-disable-them/
class NoAliasDumper(yaml.SafeDumper):
    def ignore_aliases(self, data):
        return True

def writeYamlFile(data, file):
    """Write an object to a yaml file"""
    with open(file, 'w') as f:
        yaml.dump(data, f, sort_keys=False, Dumper=NoAliasDumper)

def main():
    prog = 'forgeops-ng env'

    parser = argparse.ArgumentParser(description='Manage a ForgeRock Identity Platform environment',
                                     prog=prog,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--debug', '-d', dest='debug', action='store_true', help='Turn on debugging')
    parser.add_argument('--fqdn', '-f', dest='fqdn', help='Comma separated list of FQDNs')
    parser.add_argument('--ingress', '-i', dest='ingress', help='Ingress class name')
    parser.add_argument('--kustomize', '-k', dest='kustomize', help='Kustomize dir to use (absolute or relative to forgeops root)')
    parser.add_argument('--helm', '-H', dest='helm', help='Dir to store helm values files (absolute or relative to forgeops root)')
    parser.add_argument('--namespace', '-n', dest='namespace', help='Namespace to set in the overlay')
    parser.add_argument('--no-namespace', dest='no_namespace', action='store_true', help='Remove namespace from overlay')
    parser.add_argument('--env-name', '-e', dest='env_name', required=True, help='Name of environment to manage')
    parser.add_argument('--single-instance', dest='single', action='store_true', help='Use a single-instance configuration')
    parser.add_argument('--source', '-s', dest='source', help='Name of source environment')
    parser.add_argument('--am-cpu', dest='am_cpu', help='Specify CPU setting for am pods')
    parser.add_argument('--am-mem', dest='am_mem', help='Specify memory setting for am pods')
    parser.add_argument('--am-rep', dest='am_rep', type=int, help='Specify replicas for am pods')
    parser.add_argument('--cts-cpu', dest='cts_cpu', help='Specify CPU setting for ds-cts pods')
    parser.add_argument('--cts-disk', dest='cts_disk', help='Specify disk setting for ds-cts pods')
    parser.add_argument('--cts-mem', dest='cts_mem', help='Specify memory setting for ds-cts pods')
    parser.add_argument('--cts-rep', dest='cts_rep', type=int, help='Specify replicas for ds-cts pods')
    parser.add_argument('--idm-cpu', dest='idm_cpu', help='Specify CPU setting for idm pods')
    parser.add_argument('--idm-mem', dest='idm_mem', help='Specify memory setting for idm pods')
    parser.add_argument('--idm-rep', dest='idm_rep', type=int, help='Specify replicas for idm pods')
    parser.add_argument('--idrepo-cpu', dest='idrepo_cpu', help='Specify CPU setting for ds-idrepo pods')
    parser.add_argument('--idrepo-disk', dest='idrepo_disk', help='Specify disk setting for ds-idrepo pods')
    parser.add_argument('--idrepo-mem', dest='idrepo_mem', help='Specify memory setting for ds-idrepo pods')
    parser.add_argument('--idrepo-rep', dest='idrepo_rep', type=int, help='Specify replicas for ds-idrepo pods')
    parser.add_argument('--pull-policy', dest='pull_policy', help='Set policy for all platform images')
    parser.add_argument('--no-helm', dest='no_helm', action='store_true', help="Don't create/manage helm values files")
    parser.add_argument('--no-kustomize', dest='no_kustomize', action='store_true', help="Don't create/manage kustomize overlay")
    parser.add_argument('--small', dest='size', action='store_const', const='small', help='A small sized deployment')
    parser.add_argument('--medium', dest='size', action='store_const', const='medium', help='A medium sized deployment')
    parser.add_argument('--large', dest='size', action='store_const', const='large', help='A large sized deployment')
    # Needed to be called from bin/forgeops, but ignored
    parser.add_argument('--dryrun', dest='dryrun', action='store_true', help=argparse.SUPPRESS)
    parser.add_argument('--verbose', dest='verbose', action='store_true', help=argparse.SUPPRESS)

    args = parser.parse_args()

    script_path = Path(__file__).parent
    if args.debug: print(f'script_path = {script_path}')
    root_path = script_path.parent.parent
    if args.debug: print(f'root_path = {root_path}')

    if args.namespace and args.no_namespace:
        utils.exit_msg('Specify --namespace or --no-namespace, not both')

    if args.single and (args.am_rep or args.idm_rep or args.cts_rep or args.idrepo_rep):
        utils.exit_msg('--single-instance is incompatible with *_rep options')

    # Setup defaults for values that can be set in forgeops-ng.conf
    helm = 'helm'
    if args.helm:
        helm = args.helm
    elif os.getenv('HELM_PATH'):
        helm = os.getenv('HELM_PATH')

    kustomize = 'kustomize-ng'
    if args.kustomize:
        kustomize = args.kustomize
    elif os.getenv('KUSTOMIZE_PATH'):
        kustomize = os.getenv('KUSTOMIZE_PATH')

    pull_policy = None
    if args.pull_policy:
        pull_policy = args.pull_policy
    elif os.getenv('PULL_POLICY'):
        pull_policy = os.getenv('PULL_POLICY')

    source = 'default'
    if args.source:
        source = args.source
    elif os.getenv('SOURCE'):
        source = os.getenv('SOURCE')

    do_helm = True
    if args.no_helm or os.getenv('NO_HELM') == 'true':
        do_helm = False

    do_kustomize = True
    if args.no_kustomize or os.getenv('NO_KUSTOMIZE') == 'true':
        do_kustomize = False
    # End defaults setup

    size = {}
    if args.size:
        values_path = root_path / 'charts' / 'identity-platform' / f'values-{args.size}.yaml'
        size = yaml.safe_load(open(values_path))

    if args.am_cpu or args.am_mem or args.am_rep or args.single:
        if 'am' not in size.keys():
            size['am'] = {}
            if args.am_cpu or args.am_mem:
                size['am'] = { 'resources': { 'requests': {} } }
                if args.am_mem:
                    size['am']['resources']['limits'] = {}
        if args.am_cpu:
            if args.debug: print(f"am_cpu={am_cpu}")
            size['am']['resources']['requests']['cpu'] = args.am_cpu
        if args.am_mem:
            if args.debug: print(f"am_mem={am_mem}")
            size['am']['resources']['requests']['memory'] = args.am_mem
            size['am']['resources']['limits']['memory'] = args.am_mem
        if args.am_rep:
            if args.debug: print(f"am_rep={am_rep}")
            size['am']['replicaCount'] = int(args.am_rep)
        if args.single:
            size['am']['replicaCount'] = 1

    if args.cts_cpu or args.cts_disk or args.cts_mem or args.cts_rep or args.single:
        if 'ds_cts' not in size.keys():
            size['ds_cts'] = {}
            if args.cts_cpu or args.cts_mem:
                size['ds_cts'] = { 'resources': { 'requests': {} }, }
                if args.cts_mem:
                    size['ds_cts']['resources']['limits'] = {}
            if args.cts_disk:
                size['ds_cts']['volumeClaimSpec'] = { 'resources': { 'requests': {} } }
        if args.cts_cpu:
            if args.debug: print(f"cts_cpu={cts_cpu}")
            size['ds_cts']['resources']['requests']['cpu'] = args.cts_cpu
        if args.cts_disk:
            if args.debug: print(f"cts_disk={cts_disk}")
            size['ds_cts']['volumeClaimSpec']['resources']['requests']['storage'] = args.cts_disk
        if args.cts_mem:
            if args.debug: print(f"cts_mem={cts_mem}")
            size['ds_cts']['resources']['requests']['memory'] = args.cts_mem
            size['ds_cts']['resources']['limits']['memory'] = args.cts_mem
        if args.cts_rep:
            if args.debug: print(f"cts_rep={cts_rep}")
            size['ds_cts']['replicaCount'] = int(args.cts_rep)
        if args.single:
            size['ds_cts']['replicaCount'] = 1

    if args.idm_cpu or args.idm_mem or args.idm_rep or args.single:
        if 'idm' not in size.keys():
            size['idm'] = {}
            if args.idm_cpu or args.idm_mem:
                size['idm'] = { 'resources': { 'requests': {} } }
                if args.idm_mem:
                    size['idm']['resources']['limits'] = {}
        if args.idm_cpu:
            if args.debug: print(f"idm_cpu={idm_cpu}")
            size['idm']['resources']['requests']['cpu'] = args.idm_cpu
        if args.idm_mem:
            if args.debug: print(f"idm_mem={idm_mem}")
            size['idm']['resources']['requests']['memory'] = args.idm_mem
            size['idm']['resources']['limits']['memory'] = args.idm_mem
        if args.idm_rep:
            if args.debug: print(f"idm_rep={idm_rep}")
            size['idm']['replicaCount'] = int(args.idm_rep)
        if args.single:
            size['idm']['replicaCount'] = 1

    if args.idrepo_cpu or args.idrepo_disk or args.idrepo_mem or args.idrepo_rep or args.single:
        if 'ds_idrepo' not in size.keys():
            size['ds_idrepo'] = {}
            if args.idrepo_cpu or args.idrepo_mem:
                size['ds_idrepo'] = { 'resources': { 'requests': {} }, }
                if args.idrepo_mem:
                    size['ds_idrepo']['resources']['limits'] = {}
            if args.idrepo_disk:
                size['ds_idrepo']['volumeClaimSpec'] = { 'resources': { 'requests': {} } }
        if args.idrepo_cpu:
            if args.debug: print(f"idrepo_cpu={idrepo_cpu}")
            size['ds_idrepo']['resources']['requests']['cpu'] = args.idrepo_cpu
        if args.idrepo_disk:
            if args.debug: print(f"idrepo_disk={idrepo_disk}")
            size['ds_idrepo']['volumeClaimSpec']['resources']['requests']['storage'] = args.idrepo_disk
        if args.idrepo_mem:
            if args.debug: print(f"idrepo_mem={idrepo_mem}")
            size['ds_idrepo']['resources']['requests']['memory'] = args.idrepo_mem
            size['ds_idrepo']['resources']['limits']['memory'] = args.idrepo_mem
        if args.idrepo_rep:
            if args.debug: print(f"idrepo_rep={idrepo_rep}")
            size['ds_idrepo']['replicaCount'] = int(args.idrepo_rep)
        if args.single:
            size['ds_idrepo']['replicaCount'] = 1

    values_ingress = {}
    if args.fqdn:
        hosts = args.fqdn.split(',')
        if args.debug: print(f"hosts={hosts}")
        values_ingress = {
            'platform': {
                'ingress': {
                    'hosts': hosts
                }
            }
        }

    if args.ingress:
        if 'platform' not in values_ingress.keys():
           values_ingress['platform'] = { 'ingress': {} }
        values_ingress['platform']['ingress']['className'] = args.ingress

    values_images = {}
    if pull_policy:
        values_images = {
            'am': { 'image': {} },
            'amster': { 'image': {} },
            'ds_cts': { 'image': {} },
            'ds_idrepo': { 'image': {} },
            'ds_snapshot': { 'image': {} },
            'idm': { 'image': {} },
            'ig': { 'image': {} },
            'ldif_importer': { 'image': {} },
            'admin_ui': { 'image': {} },
            'end_user_ui': { 'image': {} },
            'login_ui': { 'image': {} },
        }
        values_images['am']['image']['pullPolicy'] = pull_policy
        values_images['amster']['image']['pullPolicy'] = pull_policy
        values_images['ds_cts']['image']['pullPolicy'] = pull_policy
        values_images['ds_idrepo']['image']['pullPolicy'] = pull_policy
        values_images['idm']['image']['pullPolicy'] = pull_policy
        values_images['ldif_importer']['image']['pullPolicy'] = pull_policy
        values_images['admin_ui']['image']['pullPolicy'] = pull_policy
        values_images['end_user_ui']['image']['pullPolicy'] = pull_policy
        values_images['login_ui']['image']['pullPolicy'] = pull_policy
        values_images['ig']['image']['pullPolicy'] = pull_policy
        values_images['ds_snapshot']['image']['pullPolicy'] = pull_policy

    if Path(kustomize).is_absolute():
        kustomize_path = Path(kustomize)
    else:
        kustomize_path = root_path / kustomize
    if args.debug: print(f"kustomize_path={kustomize_path}")
    if not kustomize_path.is_dir():
       utils.exit_msg(f"Kustomize dir ({kustomize_path}) isn't a dir or doesn't exist")

    overlay_root = kustomize_path / 'overlay'
    if not overlay_root.is_dir():
       utils.exit_msg(f"Overlay root ({overlay_root}) isn't a dir or doesn't exist")

    overlay_path = overlay_root / args.env_name
    if args.debug: print(f"overlay_path={overlay_path}")

    if Path(source).is_absolute():
        source_path = Path(source)
    else:
        source_path = overlay_root / source
    if args.debug: print(f"source_path={source_path}")

    log_action = 'Create'

    ###
    ### Configure kustomize overlay
    ###
    if do_kustomize:
        if overlay_path.is_dir():
            print('Updating existing overlay.')
            log_action = 'Update'
        elif overlay_path.is_file():
            utils.exit_msg('Overlay exists as a file. Remove it and try again')
        elif not args.fqdn:
            utils.exit_msg('An FQDN is required when generating a new overlay')
        else:
            msg = f"""
Creating new overlay
From: {source_path}
To: {overlay_path}
"""
            print(msg)
            if source_path.is_dir():
                shutil.copytree(source_path, overlay_path)
            elif source_path.is_file():
                utils.exit_msg(f"Source overlay isn't a directory: {source_path}")
            else:
                utils.exit_msg(f"Source overlay doesn't exist: {source_path}")

        for d in overlay_path.iterdir():
            if args.debug: print(f"d={d}")

            if d.is_file():
              continue

            skey = str(d.name).replace('-', '_')

            isDS = True if skey.startswith('ds') else False
            res_file = 'sts.yaml' if isDS else 'deployment.yaml'

            kust_path = d / 'kustomization.yaml'
            if args.debug: print(f"kust_path={kust_path}")

            if kust_path.is_file():
                if args.debug: print(f"{kust_path} exists")
                kust = yaml.safe_load(open(kust_path))
                if args.namespace:
                    if args.debug: print(f"Setting namespace for {skey}")
                    kust['namespace'] = args.namespace
                elif args.no_namespace:
                    if args.debug: print(f"Removing namespace for {skey}")
                    if 'namespace' in kust.keys():
                        del kust['namespace']

                writeYamlFile(kust, kust_path)

            ingress_path = d / 'ingress-fqdn.yaml'
            if args.debug: print(f"ingress_path={ingress_path}")

            if ingress_path.is_file():
                if args.debug: print(f"{ingress_path} exists")
                ingress_class_found = False
                ing = yaml.safe_load(open(ingress_path))
                for idx, item in enumerate(ing):
                    if args.fqdn:
                        if 'secretName' in item['path'] or item['path'] == '/spec/rules/0/host':
                            ing[idx]['value'] = hosts[0]
                        elif 'hosts' in item['path']:
                            ing[idx]['value'] = hosts
                    if args.ingress:
                        if 'ingressClassName' in item['path']:
                            ingress_class_found = True
                            ing[idx]['value'] = args.ingress

                if args.ingress and not ingress_class_found:
                    ing.append({
                        'op': 'replace',
                        'path': '/spec/ingressClassName',
                        'value': args.ingress
                    })

                writeYamlFile(ing, ingress_path)

            platform_config = d / 'platform-config.yaml'
            if args.debug: print(f"platform_config={platform_config}")

            if skey == 'base' and platform_config.is_file():
                if args.debug: print(f"{platform_config} exists")
                pc = yaml.safe_load(open(platform_config))
                if args.fqdn:
                    pc['data']['FQDN'] = hosts[0]

                if 'ds_cts' in size.keys():
                    if 'replicaCount' in size['ds_cts'].keys():
                        pc['data']['AM_STORES_CTS_SERVERS'] = genDsConnection(
                            name='ds-cts', num=size['ds_cts']['replicaCount'])

                if 'ds_idrepo' in size.keys():
                    if 'replicaCount' in size['ds_idrepo'].keys():
                        pc['data']['AM_STORES_USER_SERVERS'] = genDsConnection(
                            name='ds-idrepo', num=size['ds_idrepo']['replicaCount'])

                writeYamlFile(pc, platform_config)

            res_path = d / res_file
            if args.debug: print(f"res_path={res_path}")

            if res_path.is_file():
                if args.debug: print(f"{res_path} exists")
                res = yaml.safe_load(open(res_path))

                if skey in size.keys():
                    if 'resources' in size[skey].keys():
                        res['spec']['template']['spec']['containers'][0]['resources'].update(size[skey]['resources'])
                        if isDS:
                            res['spec']['template']['spec']['initContainers'][0]['resources'].update(size[skey]['resources'])
                    if isDS and 'volumeClaimSpec' in size[skey].keys():
                        res['spec']['volumeClaimTemplates'][0]['spec'].update(size[skey]['volumeClaimSpec'])
                    if 'replicaCount' in size[skey].keys():
                        res['spec']['replicas'] = size[skey]['replicaCount']

                if pull_policy:
                    res['spec']['template']['spec']['containers'][0]['imagePullPolicy'] = pull_policy
                    if isDS:
                        res['spec']['template']['spec']['initContainers'][0]['imagePullPolicy'] = pull_policy

                writeYamlFile(res, res_path)

    ###
    ### Setup helm values files
    ###
    if do_helm:
        if Path(helm).is_absolute():
            helm_path = Path(helm)
        else:
            helm_path = root_path / helm
        helm_path = helm_path / args.env_name
        if args.debug: print(f"helm_path={helm_path}")

        values_file = helm_path / 'values.yaml'
        if args.debug: print(f"values_file={values_file}")
        if helm_path.is_dir():
            if values_file.is_file():
                print('Updating existing helm values.')
                log_action = 'Update'
            else:
                print('Helm environment dir exists, but has no values.yaml.')
                log_action = 'Create'
        elif helm_path.is_file():
            utils.exit_msg('Helm path exists as a file. Remove it and try again.')
        else:
            print(f'{helm_path} not found, creating.')
            helm_path.mkdir(mode=0o750, parents=True)
            log_action = 'Create'

        values_size_file = helm_path / 'values-size.yaml'
        if args.debug: print(f"values_size_file={values_size_file}")
        vs = {}
        if values_size_file.is_file():
            vs = yaml.safe_load(open(values_size_file))
        vs.update(size)
        writeYamlFile(vs, values_size_file)

        values_images_file = helm_path / 'values-images.yaml'
        if args.debug: print(f"values_images_file={values_images_file}")
        vimg = {}
        if values_images_file.is_file():
           vimg = yaml.safe_load(open(values_images_file))
        vimg.update(values_images)
        writeYamlFile(vimg, values_images_file)

        values_ingress_file = helm_path / 'values-ingress.yaml'
        if args.debug: print(f"values_ingress_file={values_ingress_file}")
        vi = {}
        if values_ingress_file.is_file():
           vi = yaml.safe_load(open(values_ingress_file))
        vi.update(values_ingress)
        writeYamlFile(vi, values_ingress_file)

        values = {}
        if values_file.is_file():
            values = yaml.safe_load(open(values_file))
        merge(values, vs, vi, vimg)
        writeYamlFile(values, values_file)

    ###
    ### Logs
    ###
    timestamp = datetime.datetime.now(datetime.timezone.utc).strftime("%Y%m%d-%H:%M:%S%z")
    cmd_ary = sys.argv
    cmd_ary[0] = prog
    cmd = ' '.join(cmd_ary)
    log_file = 'env.log'
    log_line = f"{timestamp} {log_action} {cmd}"
    if do_kustomize:
        log_path_overlay = overlay_path / log_file
        with open(log_path_overlay, 'a') as log_overlay_f:
            log_overlay_f.write(f"{log_line}\n")
    if do_helm:
        log_path_helm = helm_path / log_file
        with open(log_path_helm, 'a') as log_helm_f:
            log_helm_f.write(f"{log_line}\n")


if __name__ == '__main__':
    main()
