#!/usr/bin/env bash

set -e

# Grab our starting dir
start_dir=$(pwd)
# Figure out the dir we live in
SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
# Bring in our standard functions
source $SCRIPT_DIR/../../lib/shell/stdlib.sh
# Bring in common.sh
source $SCRIPT_DIR/common.sh
# Go back to where we started
cd $start_dir

usage() {
  local usage_msg=$(cat<<EOM
usage: $PROG --env-name ENV_NAME [OPTIONS] COMPONENT [COMPONENT]...

Build container images for one or more ForgeRock components.

Notes:
  * building amster images is not supported, use bin/amster
  * Only ${COMPONENTS_FBC[*]} respect --config-profile
  * You must use --push-to or set PUSH_TO in your environment/forgeops.conf

OPTIONS:
  -h|--help                        : display usage and exit
  -d|--debug                       : turn on debugging
  --dryrun                         : do a dry run
  -v|--verbose                     : be verbose
  -b|--build-path <path>           : path to build dir (default: docker)
  -e|--env-name ENV_NAME           : Name of environment to target
  -k|--kustomize                   : path to kustomize dir (default: kustomize)
                                     (full path or relative to git root)
  -p|--config-profile <profile>    : name of the config profile to use
  -r|--push-to <registry>          : container registry to push built images to
  -l|--release-name <release-name> : release to use for base images
  --reset                          : reset image-defaulter to git index
  -t|--tag <tag>                   : image tag to use

Valid Components:
  ${COMPONENTS_VALID[*]}

Deprecated Components:
  ${COMPONENTS_BUILD_DEP[*]}

Examples:
  Normal operation:
  $PROG -p prod -e prod am

  Do a dryrun:
  $PROG -p prod -e prod --dryrun am

EOM
)

  usageStd $1 "$usage_msg" "$2"
}

# Setup valid components now so they get presented in the usage
COMPONENTS_FBC=( "am" "idm" "ig" )
COMPONENTS_BUILD_DEP=( "amster" ) # Deprecated build components
COMPONENTS_VALID=( ${COMPONENTS_STD[@]} ${COMPONENTS_BUILD[@]} ${COMPONENTS_BUILD_DEP[@]} 'all' )

# Code in common.sh
processArgs $*
checkComponents
kubeInit

if [ -d "$OVERLAY_PATH" ] ; then
  message "Overlay exists: $OVERLAY" "debug"
else
  usage 1 "Overlay dir doesn't exist: $OVERLAY_PATH"
fi

CONTAINER_ENGINE=${CONTAINER_ENGINE:-docker}
message "CONTAINER_ENGINE=$CONTAINER_ENGINE" "debug"

if [ -d "$BUILD_PATH" ] ; then
  message "Build path exists: $BUILD_PATH" "debug"
  BUILD_PATH_OPT="-b $BUILD_PATH"
else
  usage 1 "Build path doesn't exist: $BUILD_PATH"
  BUILD_PATH_OPT=
fi

if [ "$RESET" = true ] ; then
  echo "Reset to git index: $BUILD_PATH/image-defaulter"
  runOrPrint git restore $OVERLAY_PATH/image-defaulter
  exit 0
fi

if containsElement "amster" ${COMPONENTS[@]} ; then
  usage 1 "Embedding AM dynamic configs in the amster image is not supported. Manage AM dynamic config with the bin/amster cmd instead."
fi

if containsElement "all" ${COMPONENTS[@]} ; then
  message "Component 'all' given, setting components"
  COMPONENTS=( ${COMPONENTS_STD[@]} ${COMPONENTS_BUILD[@]} )
fi
message "COMPONENTS=$COMPONENTS" "debug"

for c in ${COMPONENTS[@]} ; do
  message "c=$c" "debug"
  BUILD_ARGS_REAL=${BUILD_ARGS:-}
  if containsElement $c ${COMPONENTS_FBC[@]} && [ -n "$CONFIG_PROFILE" ] ; then
    BUILD_ARGS_REAL+=" --build-arg CONFIG_PROFILE=$CONFIG_PROFILE"
  fi

  build_d=$BUILD_PATH/$c
  if [ -d "$build_d" ] ; then
    message "$build_d exists." "debug"
  else
    echo "WARNING: $build_d doesn't exist, skipping"
    continue
  fi

  releases_d=$build_d/releases
  if [ -d "$releases_d" ] && [ -n "$RELEASE_NAME" ] ; then
    release_f=$releases_d/$RELEASE_NAME
    if [ -f $release_f ] ; then
      while IFS= read -r line ; do
        BUILD_ARGS_REAL+=" --build-arg $line"
      done < $release_f
    fi
  fi

  IMAGE=$c
  TAG_OPT=
  if [ -n "$PUSH_TO" ] && [ "$PUSH_TO" != 'none' ] ; then
    IMAGE="${PUSH_TO}/${IMAGE}"
  fi
  if [ -n "$TAG" ] ; then
    IMAGE="${IMAGE}:${TAG}"
    TAG_OPT="-t ${TAG}"
  fi

  runOrPrint $CONTAINER_ENGINE build $BUILD_ARGS_REAL -t $IMAGE -f $build_d/Dockerfile $build_d

  PUSH_OPT=
  if [ -n "$PUSH_TO" ] && [ "$PUSH_TO" != 'none' ] ; then
    runOrPrint $CONTAINER_ENGINE push $IMAGE
    PUSH_OPT="--push-to ${PUSH_TO}"
  elif [[ "$PUSH_TO" =~ ^([N|n][O|o][N|n][E|e]) ]] ; then
    PUSH_OPT="--push-to none"
  fi

  runOrPrint $SCRIPT_DIR/image -e $ENV_NAME -k $KUSTOMIZE_PATH $PUSH_OPT $TAG_OPT $BUILD_PATH_OPT $c
done
