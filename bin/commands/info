#!/usr/bin/env python3
"""Output secrets and URLs for a ForgeRock deployment"""

import argparse
import json
import os
import sys
import site
from pathlib import Path

file_name = Path(__file__)
current_file_path = file_name.parent.resolve()
root_dir = [parent_path for parent_path in current_file_path.parents if (parent_path / 'README.md').exists()][0]
dependencies_dir = os.path.join(root_dir, 'lib', 'dependencies')
# Insert lib folders to python path
sys.path.insert(0, str(root_dir))
sys.path.insert(1, str(dependencies_dir) + site.USER_SITE.replace(site.USER_BASE, ''))

import lib.python.utils as utils


def main():
    prog = "forgeops info"
    parser = argparse.ArgumentParser(description="Display basic info for a ForgeRock Identity Platform k8s deployment",
                                     prog=prog,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--debug', '-d', dest='debug', action='store_true', default=argparse.SUPPRESS, help='Turn on debugging')
    parser.add_argument('--json', dest='jsonfmt', action='store_true', default=argparse.SUPPRESS, help='Print information in JSON format')
    parser.add_argument('--namespace', '-n', dest='namespace', default=argparse.SUPPRESS, help='Target namespace (default: current ctx namespace)')
    # Needed to be called from bin/forgeops, but ignored
    parser.add_argument('--dryrun', dest='dryrun', action='store_true', help=argparse.SUPPRESS)
    parser.add_argument('--verbose', dest='verbose', action='store_true', help=argparse.SUPPRESS)

    args = parser.parse_args()

    ctx_namespace = utils.get_namespace()
    ctx = utils.get_context()
    namespace = getattr(args, 'namespace', None) or ctx_namespace
    jsonfmt = getattr(args, 'jsonfmt', None)

    if not jsonfmt:
        utils.message(f'Targeting namespace: "{namespace}".')
    secrets = utils.printsecrets(namespace, not jsonfmt)
    urls = utils.printurls(namespace, not jsonfmt)
    output = {'context': ctx, 'namespace': namespace, 'secrets': secrets, 'urls': urls}
    if jsonfmt:
        print(json.dumps(output))


if __name__ == '__main__':
    main()
