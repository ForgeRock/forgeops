#!/usr/bin/env bash

set -e

# Grab our starting dir
start_dir=$(pwd)
# Figure out the dir we live in
SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
# Bring in our standard functions
source $SCRIPT_DIR/../stdlib.sh
# Bring in common.sh
source $SCRIPT_DIR/common.sh
# Go back to where we started
cd $start_dir

usage() {
  local usage_msg=$(cat<<EOM
Usage:
$PROG --env-name ENV_NAME [OPTIONS] [<component> <component> ...]

Apply a ForgeRock Identity Platform kustomize overlay into a k8s namespace.
This runs \`kubectl apply -k\` on an overlay dir.

Notes:
  * forgeops install is an alias for apply
  * if overlay doesn't exist, a new one will be generated

OPTIONS:
  -h|--help                   : display usage and exit
  -d|--debug                  : turn on debugging
  -r|--dryrun                 : do a dry run
  -v|--verbose                : be verbose
  -a|--amster-retain <n>      : keep amster pod running for n seconds. (default: 10)
                                add "infinity" to keep up indefinitely
  -c|--create-namespace       : create the namespace if it doesn't exist
  -e|--env-name ENV_NAME      : Name of environment to apply (default: demo)
  -f|--fqdn FQDN[,FQDN]       : list of FQDNs to use when generating a fresh overlay
  -n|--namespace <ns>         : k8s namespace to install into
  -k|--kustomize PATH         : kustomize dir to use (default: kustomize)
                                (full path or relative to forgeops root)

Valid components:
  ${COMPONENTS_VALID[@]}

Examples:
  Normal operation (uses demo overlay):
  $PROG

  Use custom overlay:
  $PROG -e my_overlay

  Do a dryrun:
  $PROG --dryrun -e my_overlay

EOM
)

  usageStd $1 "$usage_msg" "$2"
}

# Setup valid components now so they get presented in the usage
COMPONENTS_VALID=(${COMPONENTS_STD[@]} ${COMPONENTS_INSTALL[@]} 'all')

# Code in common.sh
processArgs $*
checkComponents
shiftBaseComponent 'first'

kubeInit

if [ -n "$NAMESPACE" ] ; then
  if kubeExists ns $NAMESPACE ; then
    message "Namespace exists: $NAMESPACE" "debug"
  elif [ "$CREATE_NAMESPACE" = true ] ; then
    message "Creating namespace: $NAMESPACE"
    kube create ns $NAMESPACE
  else
    usage 1 "Namespace ($NAMESPACE) doesn't exist and --create-namespace not given"
  fi
fi

if containsElement 'all' ${COMPONENTS[@]} ; then
  COMPONENTS=( 'all' )
fi

if containsElementLike 'ds-' ${COMPONENTS[@]} && ! containsElement 'all' ${COMPONENTS[@]} ; then
  if ! kubeExists sts 'ds-cts' || ! kubeExists sts 'ds-idrepo' ; then
    COMPONENTS+=( 'ldif-importer' )
  fi
fi

# Create logic to check if platform-config and secrets are there if ds- is given

if [ ! -d "$OVERLAY_PATH" ] ; then
  echo "Overlay directory is missing, generating $ENV_NAME"
  GEN_OPTS=""
  [[ -n "$FQDN" ]] && GEN_OPTS+=" --fqdn ${FQDN}"
  [[ -n "$SIZE" ]] && GEN_OPTS+=" --${SIZE}"
  runOrPrint $ROOT_PATH/bin/forgeops-ng env -e $ENV_NAME $GEN_OPTS
fi

for c in ${COMPONENTS[@]} ; do
  message "c=$c" "debug"
  if [ "$c" == "all" ] ; then
    c_path=$OVERLAY_PATH
  else
    c_path=$OVERLAY_PATH/$c
  fi
  [[ -d $c_path ]] && kube apply -k $c_path
done

echo "Sleeping 30 seconds to give time for secrets to populate"
if [ "$DRYRUN" = true ] ; then
  echo "Not sleeping for dryrun"
else
  sleep 30
fi

runOrPrint $SCRIPT_DIR/info $NAMESPACE_OPT
