#!/usr/bin/env bash

set -e

# Grab our starting dir
start_dir=$(pwd)
# Figure out the dir we live in
SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
# Bring in our standard functions
source $SCRIPT_DIR/../../lib/shell/stdlib.sh
# Bring in common.sh
source $SCRIPT_DIR/common.sh
# Go back to where we started
cd $start_dir

usage() {
  local usage_msg=$(cat<<EOM
usage: $PROG [OPTIONS] [<component> <component> ...]

Wait for platform components to be ready

OPTIONS:
  -h|--help                   : display usage and exit
  --debug                     : turn on debugging
  --dryrun                    : do a dry run
  -v|--verbose                : be verbose
  -a|--amster-retain <n>      : Keep amster pod running for n seconds. (default: 10)
                                Add "infinity" to keep up indefinitely
  -n|--namespace <ns>         : k8s namespace to wait for components
  -t|--timeout <n>            : set the max time in seconds to wait for (default: 600)

Valid components:
  ${COMPONENTS_VALID[@]}

Examples:
  Normal operation:
  $PROG

  Do a dryrun:
  $PROG --dryrun

EOM
)

  usageStd $1 "$usage_msg" "$2"
}

waitForResource() {
  message "Starting waitForResource()" "debug"

  local condition=$1
  local resource=$2

  echo "Waiting for ${resource} to be ${condition}."

  if waitResourceExists "$resource" ; then
    kube wait --for=condition=$condition --timeout="${TIMEOUT}s" $resource
  else
    echo "ERROR: $resource not found. Skipping."
  fi
}

waitForSecret() {
  message "Starting waitForSecret()" "debug"

  local secret=$1
  local start_time=$(date +%s)
  local now=$(date +%s)
  local return_code=1

  echo -n "Waiting for secret $secret to exist..."
  while [ $(($now - $start_time)) -le $TIMEOUT ] ; do
    if kubeExists "secret $secret" ; then
      echo done
      return_code=0
      break
    else
      echo -n '.'
      sleep 1
    fi
    now=$(date +%s)
  done

  return $return_code
}

waitResourceExists() {
  message "Starting waitResourceExists()" "debug"

  local resource=$1
  local start_time=$(date +%s)
  local now=$(date +%s)
  local return_code=1

  while [ $(($now - $start_time)) -le $TIMEOUT ] ; do
    if kubeExists $resource ; then
      return_code=0
      break
    fi
    now=$(date +%s)
  done

  return $return_code
}

# Setup valid components now so they get presented in the usage
COMPONENTS_VALID=${COMPONENTS_WAIT[@]}

# Code in common.sh
processArgs $*
checkComponents

SECRET_NAMES=('am-env-secrets' 'idm-env-secrets' 'ds-passwords' 'ds-env-secrets')
TIMEOUT=${TIMEOUT:-60}

kubeInit

for c in ${COMPONENTS[@]} ; do
  message "c=$c" "debug"
  case $c in
    am)
      waitForResource ready "pod -l app=am"
      ;;

    amster)
      waitForResource 'complete' job/amster
      ;;

    apps)
      waitForResource ready "pod -l app=am"
      waitForResource 'complete' job/amster
      waitForResource ready "pod -l app=idm"
      ;;

    ds)
      waitResourceExists 'sts/ds-cts'
      ds_cts_rep=$($K_CMD $NAMESPACE_OPT get sts ds-cts -o=jsonpath='{.spec.replicas}')
      ((ds_cts_rep--))
      waitResourceExists 'sts/ds-idrepo'
      ds_idrepo_rep=$($K_CMD $NAMESPACE_OPT get sts ds-idrepo -o=jsonpath='{.spec.replicas}')
      ((ds_idrepo_rep--))
      message "ds_cts_rep=${ds_cts_rep}" "debug"
      message "ds_idrepo_rep=${ds_idrepo_rep}" "debug"
      for i in $(seq 0 $ds_idrepo_rep) ; do
        waitForResource ready pod/ds-idrepo-$i
      done
      for i in $(seq 0 $ds_cts_rep) ; do
        waitForResource ready pod/ds-cts-$i
      done
      ;;

    idm)
      waitForResource ready "pod -l app=idm"
      ;;

    ig)
      waitForResource ready "pod -l app=ig"
      ;;

    secrets)
      for s in ${SECRET_NAMES[@]} ; do
        message "s=$s" "debug"
        waitForSecret $s
      done
      ;;

    *)
      usage 1 "Invalid wait target: $c"
      ;;
  esac
done
