#!/usr/bin/env python3
"""Upgrade a ForgeOps environment to the latest updates"""

import argparse
import datetime
import site
import os
from pathlib import Path
import shutil
import sys
file_name = Path(__file__)
current_file_path = file_name.parent.resolve()
root_path = [parent_path for parent_path in current_file_path.parents if (parent_path / 'README.md').exists()][0]
dependencies_dir = os.path.join(root_path, 'lib', 'dependencies')
# Insert lib folders to python path
sys.path.insert(0, str(root_path))
sys.path.insert(1, str(dependencies_dir) + site.USER_SITE.replace(site.USER_BASE, ''))

from lib.python.ensure_configuration_is_valid_or_exit import ensure_configuration_is_valid_or_exit, \
    print_how_to_install_dependencies
from lib.python.defaults import SNAPSHOT_ROLE_NAME

# First ensure configure has been executed
try:
    ensure_configuration_is_valid_or_exit()
except Exception as e:
    try:
        print(f'[error] {e.__str__()}')
    except:
        raise e
    sys.exit(1)

try:
    import yaml
    from mergedeep import merge
except:
    print_how_to_install_dependencies()
import lib.python.utils as utils


# Avoid using anchors/aliases in outputted YAML
# Notice we call this with yaml.dump, but we are still using safe_dump
# From https://ttl255.com/yaml-anchors-and-aliases-and-how-to-disable-them/
class NoAliasDumper(yaml.SafeDumper):
    """ A Dumper that doesn't use YAML aliases """
    def ignore_aliases(self, data):
        return True

def writeYamlFile(data, file):
    """Write an object to a yaml file"""
    with open(file, 'w+', encoding='utf-8') as f:
        yaml.dump(data, f, sort_keys=False, Dumper=NoAliasDumper)


def log(msg, path, verbose=True, log_file='upgrade.log', end="\n"):
    """ Log a message to the upgrade log """
    log_path = path / log_file
    if not log_path.is_file():
        msg = f"""{msg}

WARNING!! {log_path} doesn't exist, creating.
Do a `git add {log_path}` to track.
"""
    if verbose:
        print(msg, end=end)
    with open(log_path, 'a', encoding='utf-8') as log_f:
        log_f.write(f"{msg}{end}")


def update_secrets_2025_2_0(overlay_path, source_path):
    """ Update secrets child overlay (2025.2.0)"""
    log('Checking secrets child overlay for 2025.2.0 updates', overlay_path)
    secrets_path = overlay_path / 'secrets'
    secrets_path_bak = overlay_path / 'secrets.bak'
    sa_path = secrets_path / 'secret-agent'
    sg_path = secrets_path / 'secret-generator'
    source_secrets_path = source_path / 'secrets'
    src_sa_path = source_secrets_path / 'secret-agent'
    src_sg_path = source_secrets_path / 'secret-generator'
    if secrets_path.is_dir():
        if sa_path.is_dir() and sg_path.is_dir():
            log(f"{secrets_path} already updated", overlay_path)
        else:
            log(f"Updating {secrets_path}", overlay_path)
            log(f"Checking {source_secrets_path}", overlay_path)
            if src_sa_path.is_dir() and src_sg_path.is_dir():
                log(f"{source_secrets_path} is up to date. Continuing.", overlay_path)
            else:
                utils.exit_msg(f"{source_secrets_path} isn't up to date. Run this script on that overlay with default as the source.")
            log("Backing up current secrets child overlay...", overlay_path, end="")
            shutil.move(secrets_path, secrets_path_bak)
            log('done', overlay_path)
            log(f"Copying {source_secrets_path} to {secrets_path}...", overlay_path, end="")
            shutil.copytree(source_secrets_path, secrets_path)
            log('done', overlay_path)
            log(f"The {secrets_path} child overlay has been updated", overlay_path)
            log('Please note that secret-agent is enabled by default.', overlay_path)

    ldif_importer_path = overlay_path / 'ldif-importer'
    ds_set_passwords_path = overlay_path / 'ds-set-passwords'
    def_ds_set_passwords_path = source_path / 'ds-set-passwords'
    if ldif_importer_path.exists():
        log("Removing old ldif-importer child overlay from default.", overlay_path)
        shutil.rmtree(ldif_importer_path)
    if not ds_set_passwords_path.is_dir():
        log("Copying ds-set-passwords child overlay from default.", overlay_path)
        shutil.copytree(def_ds_set_passwords_path, ds_set_passwords_path)
    kust_path = overlay_path / 'kustomization.yaml'
    ldif_str = './ldif-importer'
    dsp_str = './ds-set-passwords'
    if kust_path.is_file():
        kust = {}
        with open(kust_path, encoding='utf-8') as f:
            kust = yaml.safe_load(f)
        if ldif_str in kust['resources']:
            log("Replacing ldif-importer with ds-set-passwords.", overlay_path)
            kust['resources'] = utils.replace_or_append_str(kust['resources'],
                                                            ldif_str,
                                                            dsp_str)
        if dsp_str not in kust['resources']:
            log("Adding ds-set-passwords into overlay resources.", overlay_path)
            kust['resources'].append(dsp_str)

        writeYamlFile(kust, kust_path)


def update_apps_2025_2_0(overlay_path, default_overlay):
    """ Update am child overlay (2025.2.0)"""
    log('Checking idm, am, and amster child overlays for 2025.2.0 updates', overlay_path)
    base_path = '../../../base'
    paths = [
        {
            'path': overlay_path / 'am',
            'old_resource': f'{base_path}/am',
            'new_resource': f'{base_path}/am/secret-agent'
        },
        {
            'path': overlay_path / 'amster',
            'old_resource': f'{base_path}/amster',
            'new_resource': f'{base_path}/amster/secret-agent'
        },
        {
            'path': overlay_path / 'idm',
            'old_resource': f'{base_path}/idm',
            'new_resource': f'{base_path}/idm/secret-agent'
        }
    ]
    do_update = False
    def_keystore_path = default_overlay / 'keystore-create'
    keystore_path = overlay_path / 'keystore-create'
    if keystore_path.is_dir():
        log("Found keystore-create child overlay. Continuing.", overlay_path)
    else:
        log("Didn't find keystore-create child overlay, copying from default.", overlay_path)
        shutil.copytree(def_keystore_path, keystore_path)
        do_update = True
    for p in paths:
        if p['path'].is_dir():
            kust_path = p['path'] / 'kustomization.yaml'
            if kust_path.is_file():
                with open(kust_path, encoding='utf-8') as f:
                    kust = yaml.safe_load(f)
                if p['old_resource'] in kust['resources']:
                    log(f"Updating {p['path']} ...", overlay_path, end="")
                    kust['resources'] = list(set(utils.replace_or_append_str(kust['resources'], p['old_resource'], p['new_resource'])))
                    writeYamlFile(kust, kust_path)
                    log('done', overlay_path)
                    do_update = True
                else:
                    log(f"{p['path']} already updated", overlay_path)
            else:
                utils.exit_msg(f"{kust_path} is not a file. Please specify a valid environment.")
        else:
            utils.exit_msg(f"{p['path']} is not a directory. Please specify a valid environment.")

    if do_update:
        log('Please note, the updated child overlays are configured for secret-agent.', overlay_path)


class UpgradeFormatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter):
    pass


if __name__ == '__main__':
    PROG = 'forgeops upgrade'
    EPILOG = f"""Notes:
  * If you use a custom default overlay, upgrade it first.

Examples:
  Normal operation:
    {PROG} -e my_env

  Use custom default overlay:
    {PROG} -e my_env -s my_default

  Upgrade custom default:
    {PROG} -e my_default -s default
"""

    parser = argparse.ArgumentParser(description='Upgrade a Ping Identity Platform environment',
                                     prog=PROG,
                                     epilog=EPILOG,
                                     formatter_class=UpgradeFormatter)
    parser.add_argument('--debug', '-d', action='store_true', help='Turn on debugging')
    parser.add_argument('--helm-path', '-H', help='Dir to store Helm values files (absolute or relative to forgeops_data)')
    parser.add_argument('--kustomize-path', '-k', help='Kustomize dir to use (absolute or relative to forgeops_data)')
    parser.add_argument('--env-name', '-e', required=True, help='Name of environment to manage')
    parser.add_argument('--source', '-s', help='Name of source Kustomize overlay')

    args = parser.parse_args()

    config = {}
    config['script_path'] = Path(__file__).parent
    if args.debug:
        print(f"script_path = {config['script_path']}")
    config['root_path'] = config['script_path'].parent.parent
    if args.debug:
        print(f"root_path = {config['root_path']}")

    # Setup defaults for values that can be set in forgeops.conf
    overrides = utils.process_overrides(config['root_path'],
                                        getattr(args, 'helm_path', None),
                                        getattr(args, 'kustomize_path', None),
                                        getattr(args, 'build_path', None),
                                        getattr(args, 'no_helm', False),
                                        getattr(args, 'no_kustomize', False),
                                        getattr(args, 'releases_src', None),
                                        getattr(args, 'pull_policy', None),
                                        getattr(args, 'source', None),
                                        getattr(args, 'ssl_secretname', None),
                                        args.debug)

    if args.debug:
        print("Overrides processed")
    config = merge(config, overrides)
    def_overlay_path = config['overlay_root'] / 'default'
    config['overlay_path'] = config['overlay_root'] / args.env_name
    config['source_path'] = config['overlay_root'] / config['source_overlay']

    timestamp = datetime.datetime.now(datetime.timezone.utc).strftime("%Y%m%d-%H:%M:%S%z")
    HEADER=f"""#
# Running `{PROG}` on {args.env_name} at {timestamp}
#"""
    log(HEADER, config['overlay_path'])

    # 2025.2.0 updates
    log('Checking 2025.2.0 updates', config['overlay_path'])
    update_secrets_2025_2_0(config['overlay_path'], config['source_path'])
    update_apps_2025_2_0(config['overlay_path'], def_overlay_path)

    FOOTER=f"""#
# End `{PROG}` on {args.env_name} at {timestamp}
#"""
    log(FOOTER, config['overlay_path'])
