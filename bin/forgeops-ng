#!/usr/bin/env bash

set -e

# Grab our starting dir
start_dir=$(pwd)
# Figure out the dir we live in
SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
# Bring in our standard functions
source $SCRIPT_DIR/stdlib.sh

usage() {
  prog=$(basename $0)

  ! read -r -d '' usage_msg <<- EOM
  Usage:
  $prog COMMAND [OPTIONS] [<component> <component> ...]

  Central interface to the scripts in commands folder. Use -h with any command
  to see its usage.

  OPTIONS:
  -h|--help                 : display usage and exit
  --debug                   : turn on debugging
  --dryrun                  : do a dry run

  Commands: ${COMMANDS[@]}
  Deprecated Commands: ${COMMANDS_DEPRECATED[@]}

EOM

  usageStd $1 "$usage_msg" $2

}

DEBUG=false
DRYRUN=false
VERBOSE=false

# Since we want to see dryruns for both this script and the called script,
# setting RUNANDPRINT to true so the sub script gets called.
RUNANDPRINT=true

ARG_ARRAY=("$@") # Create an array out of our arguments

COMMANDS=(
  'apply'
  'build'
  'configure'
  'delete'
  'env'
  'info'
  'image'
  'wait'
)

COMMANDS_DEPRECATED=(
  'clean'
  'config'
  'install'
  'generate'
)

# Avoiding our pattern of looping and shifting ARG elements as we want to
# pass those as is to the worker scripts.

COMMAND=$1 # Our first arg should be the command

# We need to detect --dryrun and --debug.
if containsElement '--debug' ${ARG_ARRAY[@]} ; then
  DEBUG=true
fi

if containsElement '--dryrun' ${ARG_ARRAY[@]} ; then
  DRYRUN=true
fi

message "COMMAND=$COMMAND" "debug"
message "DEBUG=$DEBUG" "debug"
message "DRYRUN=$DRYRUN" "debug"

message "Validating command: $COMMAND" "debug"
if containsElement $COMMAND ${COMMANDS[@]} ; then
  message "Valid command: $COMMAND" "debug"
  VALID_COMMAND=true
elif containsElement $COMMAND ${COMMANDS_DEPRECATED[@]} ; then
  message "Deprecated command: $COMMAND" "debug"
  VALID_COMMAND=true
else
  VALID_COMMAND=false
fi
message "VALID_COMMAND=$VALID_COMMAND" "debug"

HELP_ARGS=( '-h' '--help' )
if [ "$VALID_COMMAND" = false ] && containsElements ${HELP_ARGS[@]} ${ARG_ARRAY[@]} ; then
  usage 0
elif [ "$VALID_COMMAND" = false ] ; then
  usage 1 "Invalid command: $COMMAND"
else
  message "Removing $COMMAND from arguments" "debug"
  shift
fi

FORGEOPS_CFG="$SCRIPT_DIR/../forgeops-ng.conf"
if [ -f "$FORGEOPS_CFG" ] ; then
  set -a
  source $FORGEOPS_CFG
  set +a
fi


# Make sure "forgeops-ng configure" has been run before running any commands
if [ "${COMMAND}" != "configure" ] ; then
  if ! python3 "${SCRIPT_DIR}/../lib/python/ensure_configuration_is_valid_or_exit.py" ; then
    exit 1
  fi
fi
runOrPrint "$SCRIPT_DIR/commands/${COMMAND} $*"
