#!/usr/bin/env python3
"""This script copies Kubernetes secrets between namespaces or clusters"""

import argparse
import json
import sys
import os
from pathlib import Path
import site

file_name = Path(__file__)
current_file_path = file_name.parent.resolve()
root_path = [parent_path for parent_path in current_file_path.parents if (parent_path / 'README.md').exists()][0]
dependencies_dir = os.path.join(root_path, 'lib', 'dependencies')
# Insert lib folders to python path
sys.path.insert(0, str(root_path))
sys.path.insert(1, str(dependencies_dir) + site.USER_SITE.replace(site.USER_BASE, ''))

from lib.python import utils


def main():
    """main"""
    parser = argparse.ArgumentParser(description='Copy Kubernetes secrets to another namespace or cluster')
    parser.add_argument('--source-cluster',
                        help='Source cluster (default: current context)',
                        default="current")
    parser.add_argument('--source-ns',
                        help='Source namespace (default: current context)',
                        default="current")
    parser.add_argument('--dest-cluster',
                        help='Destination cluster (default: source cluster)',
                        default="current")
    parser.add_argument('--dest-ns',
                        help='Destination namespace (default: source namespace)',
                        default="current")
    args = parser.parse_args()

    # Set source_cluster to current context if not provided
    source_cluster = utils.get_context() if args.source_cluster == "current" else args.source_cluster

    # Set dest_cluster to source_cluster if not provided
    dest_cluster = source_cluster if args.dest_cluster == "current" else args.dest_cluster

    # Set namespace vars to current context namespace if not provided
    if args.source_ns == "current":
        _, ctx_namespace, _ = utils.run('kubectl',
                                        'config view --minify --output=jsonpath={..namespace}',
                                        cstdout=True)
        source_ns = ctx_namespace.decode('ascii') if ctx_namespace else "default"
    else:
        source_ns = args.source_ns

    # Set destination namespace to match source namespace if not provided
    dest_ns = source_ns if args.dest_ns == "current" else args.dest_ns

    # List of secrets.
    secrets = ["am-env-secrets", "am-keystore", "am-passwords", "amster", "amster-env-secrets", "ds",
               "ds-env-secrets", "ds-master-keypair", "ds-passwords", "ds-ssl-keypair",
               "idm", "idm-env-secrets", "platform-ca", "truststore", "truststore-pem"]

    print(f"Copying secrets from namespace: {source_ns} in cluster: {source_cluster}")
    print(f"Copying secrets to namespace: {dest_ns} in cluster:{dest_cluster}")

    # Loop through secrets and copy from source to destination
    for secret in secrets:
        try:
            print(f"Copying secret: {secret}")

            # Get secret
            _, contents, _ = utils.run('kubectl',
                                       f'get secret {secret} --context {source_cluster} --namespace {source_ns} -o json'
                                       , cstdout=True)

            # Need to convert to string before converting to dict
            contents = contents.decode('ascii')

            # Update namespace in document
            contents = contents.replace(f'"namespace": "{source_ns}"', f'"namespace": "{dest_ns}"')

            # Convert to dict
            json_contents = json.loads(contents)

            # Delete ownerReferences metadata as this requires a secret-agent-configration to exists in the destination ctx.
            if "ownerReferences" in json_contents["metadata"]:
                del json_contents["metadata"]["ownerReferences"]

            # Delete other unique fields that will block the kubectl apply command if secret already exists
            del json_contents["metadata"]["creationTimestamp"]
            del json_contents["metadata"]["resourceVersion"]
            del json_contents["metadata"]["uid"]

            # Create secret in destination cluster
            utils.run('kubectl',
                      f'--context {dest_cluster} --namespace {dest_ns} apply -f -',
                      stdin=bytes(json.dumps(json_contents), 'ascii'))

        except Exception as e:
            print(f'Could not copy secret: {secret}')
            print("Error: ", e)
            continue
    return


if __name__ == "__main__":
    main()
