#!/usr/bin/env bash
# Script to download binaries from the ForgeRock Artifactory repository.
# This is used in the first stage of a multi stage build to download the ForgeRock binaries. If you are ForgeRock customer
# you can obtain an API key as part of your backstage subscription.
# Another alternative for product binaries is to replace this docker image and script with
# an alternate version that copies the binaries from a source such as S3, GCS, etc. See ../downloader-sample

API_KEY=${API_KEY:-`cat /api_key`}

# Pass this in via the environment to use a GCS cache for the artifacts. You must have RW access to this bucket
#GCS_DIR=gs://forgeops-cache

if [ -z "$API_KEY" ]
then
    echo "You must set the API_KEY environment variable to download images from Artifactory"
    exit 1
fi

# Update major versions / snapshots here. 

# Download a binary specified by $1
dl_binary() {

    # We supply both the snapshot source and the non snapshot source to the dl function
    case "$1" in
    amster)
        dl $AMSTER_REPO $AMSTER_ZIP amster.zip
        ;;
    openam)
        dl $AM_REPO $AM_WAR openam.war
        ;;
    openidm)
        dl $IDM_REPO $IDM_ZIP openidm.zip
        ;;
   openig)      
        dl $IG_REPO $IG_WAR openig.war
        ;;
    opendj)
        dl $DJ_REPO $DJ_ZIP opendj.zip
        ;;
    nginx-agent)
        dl $WEB_AGENTS_STABLE_REPO $NGINX_AGENT_ZIP nginx-agent.zip
        ;;
    apache-agent)
        dl $WEB_AGENTS_STABLE_REPO $APACHE_AGENT_ZIP apache-agent.zip
        ;;
    *) 
        echo "Invalid image to downoad $1"
        exit 1
    esac
}

# Do the actual download. $1 - REPO ,  $2 - artifact name, $3 destination
dl(){
   
    src="$1/$2"
  
    echo "Downloading $src to $3"

    echo "GCS_CACHE is: $GCS_DIR"
    if [ -n "$GCS_DIR" ]; then
        gsutil cp $GCS_DIR/$2 $3
        if [ "$?" -eq 0 ];  then
            return 0
        fi
        echo "Can't find cached file $2 - will download"
    fi

    if [ -z "${WGET+x}" ]
    then
        curl --fail -s -H "$HEADER"  $src -o $3
    else
        wget -q --inet4-only --timeout=20 --header "$HEADER" -O $3 $src
    fi

    if [ $? -ne 0 ] 
    then 
        echo "Download failed"
        exit 1
    fi

    if [ -n "$GCS_DIR" ]; then
        echo "Saving a cached copy of $2"
        gsutil cp "$3" "$GCS_DIR/$2" || echo "Could not save to cache. Skipping"
    fi

}

VERSION=${VERSION:-6.5.0}
# you should not need to edit the paths below
REPO=https://maven.forgerock.org/repo/internal-releases/org/forgerock


while getopts "wv:" opt; do
  case ${opt} in
    w ) WGET="true" ;;
    v ) VERSION="${OPTARG}" 
        echo $VERSION | grep SNAPSHOT \
                && REPO="https://maven.forgerock.org/repo/internal-snapshots/org/forgerock"
                SNAPSHOT="true"
        ;;
    \? )
         echo "Usage: dl.sh [-v version] images..."
         echo "-c Use curl instead of wget"
         echo "-v VERSION - download a specific version (example -v 6.5.0). Default $VERSION"
         echo "Images can be one or more of: $IMAGES"
         echo "If not specified, all images are downloaded"
         exit 1
      ;;
  esac
done
shift $((OPTIND -1))

IMAGES="opendj openidm amster openam openig"


WEB_AGENTS_SNAPSHOT_REPO=https://maven.forgerock.org/repo/forgerock-virtual/org/forgerock/openam/agents/web-agents/nightly
WEB_AGENTS_STABLE_REPO=https://maven.forgerock.org/repo/forgerock-virtual/org/forgerock/openam/agents/web-agents/5.0.1

AM_WAR=openam-server-$VERSION.war
AM_REPO=$REPO/am/openam-server/$VERSION


AMSTER_ZIP=openam-amster-$VERSION.zip
AMSTER_REPO=$REPO/am/openam-amster/$VERSION

IDM_ZIP=openidm-zip-$VERSION.zip
IDM_REPO=$REPO/openidm/openidm-zip/$VERSION

DJ_ZIP=opendj-server-$VERSION.zip
DJ_REPO=$REPO/opendj/opendj-server/$VERSION

IG_WAR=openig-war-$VERSION.war
IG_REPO=$REPO/openig/openig-war/$VERSION

NGINX_AGENT_ZIP=web-agents-5.0.1-NGINX_r12_Ubuntu16_64bit.zip

APACHE_AGENT_ZIP=web-agents-5.0.1-Apache_v24_Linux_64bit.zip


HEADER="X-JFrog-Art-Api: $API_KEY"


if [ "$#" -ne 0 ]; then
   IMAGES="$@"
fi

for image in $IMAGES; do
      dl_binary $image
done