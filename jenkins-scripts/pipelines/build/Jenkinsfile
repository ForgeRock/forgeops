/*
 * Copyright 2019-2024 ForgeRock AS. All Rights Reserved
 *
 * Use of this code requires a commercial software license with ForgeRock AS.
 * or with one of its affiliates. All use shall be exclusively subject
 * to such license between the licensee and ForgeRock AS.
 */

@Library([
    'forgerock-pipeline-libs@2a73d303f9c020f778d959de06ca1a90730d344e',
    'java-pipeline-libs@c7f1fb930553cac9e84d4af6ddc80fc4b10916d9'
]) _

import com.forgerock.pipeline.reporting.PipelineRun
import com.forgerock.pipeline.reporting.PipelineRunLegacyAdapter

BASE_VERSION = '7.2.0'

buildDirectories = [
    [ name: 'ds-proxy', folder: 'ds-proxy', arguments: '.', forceBuild: false ],
    [ name: 'ds-util', folder: 'ds-util', arguments: '.', forceBuild: false ],
]

def pipeline
def pipelineRun

node('gce-vm-forgeops-n2d-standard-4') {
    stage('Clone repo') {
        checkout scm

        def jobLocation = "${env.WORKSPACE}/jenkins-scripts/pipelines/build"
        def libsLocation = "${env.WORKSPACE}/jenkins-scripts/libs"
        def stagesLocation = "${env.WORKSPACE}/jenkins-scripts/stages"

        localGitUtils = load("${libsLocation}/git-utils.groovy")
        commonModule = load("${libsLocation}/common.groovy")
        commonLodestarModule = load("${libsLocation}/lodestar-common.groovy")

        currentBuild.displayName = "#${BUILD_NUMBER} - ${commonModule.SHORT_GIT_COMMIT}"
        currentBuild.description = 'built:'

        // Load the QaCloudUtils dynamically based on Lodestar commit promoted to Forgeops
        library "QaCloudUtils@${commonModule.lodestarRevision}"

        if (env.TAG_NAME) {
            currentBuild.result = 'ABORTED'
            error 'This pipeline does not currently support building from a tag'
        } else {
            if (isPR()) {
                pipeline = load("${jobLocation}/pr.groovy")
                prTestsStage = load("${stagesLocation}/pr-tests.groovy")
            } else {
                pipeline = load("${jobLocation}/postcommit.groovy")
                createRepoStableTag = load("${stagesLocation}/create-repo-stable-tag.groovy")
                createPlatformImagesPR = load("${stagesLocation}/create-platform-images-pr.groovy")
            }
            // Needed both for PR and postcommit
            postcommitTestsStage = load("${stagesLocation}/postcommit-tests.groovy")
        }

        builder = PipelineRun.builder(env, steps)
                .pipelineName('forgeops')
                .branch(commonModule.GIT_BRANCH)
                .commit(commonModule.GIT_COMMIT)
                .commits(["forgeops": commonModule.GIT_COMMIT])
                .committer(commonModule.GIT_COMMITTER)
                .commitMessage(commonModule.GIT_MESSAGE)
                .committerDate(dateTimeUtils.convertIso8601DateToInstant(commonModule.GIT_COMMITTER_DATE))
                .repo('forgeops')

        pipelineRun = new PipelineRunLegacyAdapter(builder.build())
    }

    pipeline.initialSteps()
    pipeline.buildDockerImages(pipelineRun)

    if (commonModule.branchSupportsPitTests()) {
        // Allow only one postcommit at a time accross all the branches
        withPostcommitLock((isPR() && !commonLodestarModule.doRunPostcommitTests()) ? null : 'postcommit-forgeops.engineeringpit.com') {
            pipeline.postBuildTests(pipelineRun)
        }
    }

    if (commonModule.branchSupportsIDCloudReleases() && !isPR()) {
        pipeline.createRepoStableTag(pipelineRun)
        pipeline.createPlatformImagesPR(pipelineRun)
    }

    pipeline.finalNotification()
}

def withPostcommitLock(String resourceName, Closure process) {
    if (resourceName) {
        lock(resource: resourceName) {
            process()
        }
    } else {
        process()
    }
}
