/*
 * Copyright 2019-2021 ForgeRock AS. All Rights Reserved
 *
 * Use of this code requires a commercial software license with ForgeRock AS.
 * or with one of its affiliates. All use shall be exclusively subject
 * to such license between the licensee and ForgeRock AS.
 */

//==================================================
// ForgeOps pipeline to promote 'master' to 'stable'
//==================================================

import java.net.URLDecoder

import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException

@Library([
    'forgerock-pipeline-libs@45b7fefa52bb82702c2ebd62d9c538fa7f218679',
    'java-pipeline-libs@0e109e8bb0bb067d8505aff78709623f81100177'
])
import com.forgerock.pipeline.Build
import com.forgerock.pipeline.reporting.PipelineRun

properties([
    disableConcurrentBuilds(),
    buildDiscarder(logRotator(numToKeepStr: '20')),
    pipelineTriggers([cron('H 0,12 * * *')]),
    parameters([string(defaultValue: '10', description: '', name: 'GREENFIELD_REPEAT', trim: false)]),
])

def pipelineRun

timestamps {
    manageNotifications {
        node('build&&linux') {
            stage('Setup') {
                checkout scm

                def stagesLocation = "${env.WORKSPACE}/jenkins-scripts/stages"
                def libsLocation = "${env.WORKSPACE}/jenkins-scripts/libs"

                localGitUtils = load("${libsLocation}/git-utils.groovy")
                commonModule = load("${libsLocation}/common.groovy")

                // Load the QaCloudUtils dynamically based on Lodestar commit promoted to Forgeops
                library "QaCloudUtils@${commonModule.LODESTAR_GIT_COMMIT}"

                pipelineRun = new PipelineRun(env, steps, 'forgeops', 'master', commonModule.FORGEOPS_GIT_COMMIT,
                        commits: commonModule.getCurrentProductCommitHashes())

                // Test stages
                greenfieldTests = load("${stagesLocation}/pit2-greenfield-tests.groovy")
                upgradeTests = load("${stagesLocation}/pit2-upgrade-tests.groovy")
                perfTests = load("${stagesLocation}/pit2-perf-tests.groovy")
                pit2Tests = load("${stagesLocation}/pit2-all-tests.groovy") // combines PERF, Greenfield, Upgrade

                promoteMasterToStable = load("${stagesLocation}/promote-master-to-stable.groovy")

                currentBuild.displayName = "#${BUILD_NUMBER} - ${commonModule.FORGEOPS_SHORT_GIT_COMMIT}"

                echo "Testing ForgeOps commit ${commonModule.FORGEOPS_SHORT_GIT_COMMIT} " +
                        "(${commonModule.FORGEOPS_GIT_COMMIT})"
                echo "Using Lodestar commit ${commonModule.LODESTAR_GIT_COMMIT} for the tests"
            }
        }

        pit2Tests.runStage(pipelineRun)

        promoteMasterToStable.runStage(pipelineRun)

        currentBuild.result = 'SUCCESS'
    }
}

/**
 * Manage the build notifications.
 * @param notificationsEnabled Quickly disable notifications by setting this value to @code{false}.
 * @param body The build script.
 */
def manageNotifications(boolean notificationsEnabled = true, Closure body) {
    def slackChannel = '#plat-intg-test'
    def promotionBuild = new Build(steps, env, currentBuild)
    try {
        body() // perform the build
        if (notificationsEnabled) {
            slackUtils.sendMessage(
                slackChannel,
                " ${URLDecoder.decode(env.JOB_NAME)} #${env.BUILD_NUMBER} promoted commit " +
                        "${commonModule.FORGEOPS_SHORT_GIT_COMMIT} from master to stable (<${env.BUILD_URL}|Open>)",
                slackUtils.colour('SUCCESS')
            )
        }
    } catch (FlowInterruptedException ex) {
        currentBuild.result = 'ABORTED'
        throw ex
    } catch (exception) {
        currentBuild.result = 'FAILURE'
        if (notificationsEnabled) {
            slackUtils.sendNoisyStatusMessage(slackChannel)
        }
        throw exception
    }
}
