/*
 * Copyright 2023 ForgeRock AS. All Rights Reserved
 *
 * Use of this code requires a commercial software license with ForgeRock AS.
 * or with one of its affiliates. All use shall be exclusively subject
 * to such license between the licensee and ForgeRock AS.
 */
//===============================================
// Pull request functional-tests pipeline for ForgeOps
//===============================================

import com.forgerock.pipeline.PullRequestBuild

@Library([
    'forgerock-pipeline-libs@7d7b585639d060ade751c59e3cbf23e127d17063',
    'java-pipeline-libs@c7f1fb930553cac9e84d4af6ddc80fc4b10916d9'
]) _

node('gce-vm-forgeops-n2d-standard-8') {
    stage('Clone repo') {
        checkout scm

        def jobLocation = "${env.WORKSPACE}/jenkins-scripts/pipelines/build"
        def libsLocation = "${env.WORKSPACE}/jenkins-scripts/libs"
        def stagesLocation = "${env.WORKSPACE}/jenkins-scripts/stages"

        localGitUtils = load("${libsLocation}/git-utils.groovy")
        commonModule = load("${libsLocation}/common.groovy")

        currentBuild.displayName = "#${BUILD_NUMBER} - ${commonModule.SHORT_GIT_COMMIT}"
        currentBuild.description = 'built:'

        if (!isPR()) {
            currentBuild.result = 'ABORTED'
            error 'This pipeline only support Pull Request builds'
        }
        functionalTests = load("${stagesLocation}/functional-tests.groovy")
    }

    initialSteps()
    functionalTests.runStage()
    finalNotification()
}

def initialSteps() {
    if (params.isEmpty()) {
        sendInformationMessageToPR()
    }

    properties([
            buildDiscarder(logRotator(daysToKeepStr: '5', numToKeepStr: '5')),
    ])

    // Abort any active builds relating to the current PR, as they are superseded by this build
    abortMultibranchPrBuilds()
    prBuild = new PullRequestBuild(steps, env, currentBuild, scm)
}

def finalNotification() {
    stage('Final notification') {
        // If some of the PR tests fail, the plugin that manages this doesn't throw an exception, but
        // it does set the build result to UNSTABLE/FAILURE. If it didn't do that => SUCCESS
        if (!currentBuild.result || currentBuild.result == 'SUCCESS') {
            currentBuild.result = 'SUCCESS'
            message = "Report is available [here](${env.JOB_URL}/${env.BUILD_NUMBER}/)"
        } else {
            message = "PR tests failed."
        }
        bitbucketUtils.postMultibranchBuildStatusCommentOnPullRequest(
                commitHash: commonModule.GIT_COMMIT,
                originalCommentId: bitbucketCommentId,
                messageSuffix: message
        )
    }
}

