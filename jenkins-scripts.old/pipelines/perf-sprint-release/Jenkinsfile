/*
 * Copyright 2020 ForgeRock AS. All Rights Reserved
 *
 * Use of this code requires a commercial software license with ForgeRock AS.
 * or with one of its affiliates. All use shall be exclusively subject
 * to such license between the licensee and ForgeRock AS.
 */

//============================================================================
// ForgeOps pipeline to run long running perf tests for sprint release testing
//============================================================================

import java.net.URLDecoder

import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException

@Library([
    'forgerock-pipeline-libs@45b7fefa52bb82702c2ebd62d9c538fa7f218679',
    'QaUtils@3e3d971d34ff3efdd1435dc3402c14614493ab52',
    'java-pipeline-libs@0e109e8bb0bb067d8505aff78709623f81100177'
])
import com.forgerock.pipeline.Build
import com.forgerock.pipeline.reporting.PipelineRun

def pipelineRun

if (env.TAG_NAME) {
    currentBuild.result = 'ABORTED'
    error 'This pipeline does not currently support building from a tag\nFor support, email releng@forgerock.com'
} else if (isPR()) {
    currentBuild.result = 'ABORTED'
    error 'Please check your Multibranch Pipeline configuration for this job' +
            '- it should not include settings that allow this build to be run from a PR.\n' +
            'For support, email releng@forgerock.com'
} else if (env.BRANCH_NAME.equals('master')) {
    // only master has a scheduled build; jobs for other branches can be launched manually
    properties([
            disableConcurrentBuilds(),
            buildDiscarder(logRotator(numToKeepStr: '20'))
    ])
} else if (env.BRANCH_NAME.startsWith('idcloud-')) {
    properties([
            disableConcurrentBuilds(),
            buildDiscarder(logRotator(numToKeepStr: '20'))
    ])
} else if (env.BRANCH_NAME.startsWith('paas-ga-')) {
    properties([
            disableConcurrentBuilds(),
            buildDiscarder(logRotator(numToKeepStr: '20'))
    ])
} else {

    // safety guard, to prevent non-master branches from building
    currentBuild.result = 'ABORTED'
    error 'Only master PaaS release branches are allowed to run long Perf tests .\n' +
            'For support, email releng@forgerock.com'
}

timestamps {
    manageNotifications {
        node('build&&linux') {
            stage('Setup') {
                checkout scm

                def stagesLocation = "${env.WORKSPACE}/jenkins-scripts/stages"
                def libsLocation = "${env.WORKSPACE}/jenkins-scripts/libs"

                localGitUtils = load("${libsLocation}/git-utils.groovy")
                commonModule = load("${libsLocation}/common.groovy")

                // Load the QaCloudUtils dynamically based on Lodestar commit promoted to Forgeops
                library "QaCloudUtils@${commonModule.LODESTAR_GIT_COMMIT}"

                pipelineRun = new PipelineRun(env, steps, 'forgeops', env.BRANCH_NAME, commonModule.FORGEOPS_GIT_COMMIT,
                        commits: commonModule.getCurrentProductCommitHashes())

                // Test stages
                perfSprintReleaseTests = load("${stagesLocation}/perf-sprint-release-tests.groovy")

                currentBuild.displayName = "#${BUILD_NUMBER} - ${commonModule.FORGEOPS_SHORT_GIT_COMMIT}"

                echo "Testing ForgeOps commit ${commonModule.FORGEOPS_SHORT_GIT_COMMIT} " +
                        "(${commonModule.FORGEOPS_GIT_COMMIT})"
                echo "Using Lodestar commit ${commonModule.LODESTAR_GIT_COMMIT} for the tests"
            }
        }

        perfSprintReleaseTests.runStage(pipelineRun)

        currentBuild.result = 'SUCCESS'
    }
}

/**
 * Manage the build notifications.
 * @param notificationsEnabled Quickly disable notifications by setting this value to @code{false}.
 * @param body The build script.
 */
def manageNotifications(boolean notificationsEnabled = true, Closure body) {
    def slackChannel = '#performance-notify'
    def sprintReleaseBuild = new Build(steps, env, currentBuild)
    try {
        body() // perform the build
        if (notificationsEnabled) {
            slackUtils.sendMessage(
                slackChannel,
                " ${URLDecoder.decode(env.JOB_NAME)} #${env.BUILD_NUMBER} passed on " +
                        "commit ${commonModule.FORGEOPS_SHORT_GIT_COMMIT} " +
                        "from ${env.BRANCH_NAME} (<${env.BUILD_URL}|Open>)",
                slackUtils.colour('SUCCESS')
            )
        }
    } catch (FlowInterruptedException ex) {
        currentBuild.result = 'ABORTED'
        throw ex
    } catch (exception) {
        currentBuild.result = 'FAILURE'
        if (notificationsEnabled) {
            slackUtils.sendNoisyStatusMessage(slackChannel)
        }
        throw exception
    }
}
