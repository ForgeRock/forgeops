apiVersion: batch/v1
kind: Job
metadata:
  name: import-ldif
spec:
  template:
    spec:
      restartPolicy: Never
      initContainers:
      # Init container that is responsible for getting the ldif file on the PVC
      # You will want to replace this. For example - with a process that copies the files from cloud storage
      # Currently this just sleeps a bit - and remounts the previously exported PVC
      # - name: busybox
      #   image: busybox
      #   command: ["/bin/sh"]
      #   args: ["-c", "sleep 10"]
      #   volumeMounts:
      #   - name: ldif
      #     mountPath: /data

      # Example that uses gsutil to copy files back from cloud storage
      - name: gsutil
        image: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
        command: ['/opt/scripts/gs-restore.sh']
        # If you use workload identity, mounting the service account is not required
        # env:
        # - name: GOOGLE_APPLICATION_CREDENTIALS
        #   value: /var/run/secrets/service-account.json
        volumeMounts:
        - name: ldif
          mountPath: /data
        # Keeps gcloud happy
        - name: config
          mountPath: /.config
        - name: scripts
          mountPath: /opt/scripts
        # Not needed for workload identity
        # - name: sa
        #   mountPath: /var/run/secrets

      containers:
      # Import the ldif files mounted on /data
      - name: import
        image: us-docker.pkg.dev/forgeops-public/images/ds-idrepo:7.1.7
        imagePullPolicy: IfNotPresent
        args: ["/opt/scripts/import-ldif.sh", "/data/ldif"]
        # Must mount the data, and the keystore secrets to read the data
        volumeMounts:
        - name: data
          mountPath: /opt/opendj/data
        - name: secrets
          mountPath: /opt/opendj/secrets
        - name: scripts
          mountPath: /opt/scripts
      # The volume to import the ldif from
        - name: ldif
          mountPath: /data
      securityContext:
        fsGroup: 0
        runAsUser: 11111
      serviceAccount: ldif-sa
      volumes:
      - name: data
        persistentVolumeClaim:
          # Mounts the data from a clone or a snapshot of the data pvc
          # The CSI driver must support cloning
          claimName: ds-data-clone
          # This example mounts the DS data pvc directly which means DS can not
          # be running when you do the import.
          # claimName: data-ds-idrepo-0
      - name: ldif
        persistentVolumeClaim:
          claimName: ldif
      - name: secrets
        secret:
          secretName: ds
      - name: scripts
        configMap:
          name: ldif-scripts
          defaultMode: 0755
      - name: config
        emptyDir:
          {}
      # If using workload identity you do not need the service account
      # - name: sa
      #   secret:
      #     secretName: gcs-secret

