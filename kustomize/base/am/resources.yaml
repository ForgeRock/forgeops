---
# Source: identity-platform/templates/am-entrypoint-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: am-entrypoint
  labels:
    helm.sh/chart: identity-platform-1.0.0
    app.kubernetes.io/name: identity-platform
    app.kubernetes.io/part-of: identity-platform
    app.kubernetes.io/instance: identity-platform
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
data:
  entrypoint.sh: |
    #!/usr/bin/env bash

    # Base64 encode secret generate provisioned secrets if enabled
    if [ -n "${SECRET_GENERATOR_AM_ENV_SECRETS}" ] ; then
        echo "updating env vars..."
        AM_AUTHENTICATION_SHARED_SECRET=$(echo $AM_AUTHENTICATION_SHARED_SECRET|base64)
        AM_SESSION_STATELESS_ENCRYPTION_KEY=$(echo $AM_SESSION_STATELESS_ENCRYPTION_KEY|base64)
        AM_SESSION_STATELESS_SIGNING_KEY=$(echo $AM_SESSION_STATELESS_SIGNING_KEY|base64)
        AM_SELFSERVICE_LEGACY_CONFIRMATION_EMAIL_LINK_SIGNING_KEY=$(echo $AM_SELFSERVICE_LEGACY_CONFIRMATION_EMAIL_LINK_SIGNING_KEY|base64)
    fi

    # Run upstream docker-entrypoint.sh
    /home/forgerock/docker-entrypoint.sh
---
# Source: identity-platform/templates/am-import-pem-certs-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: am-import-pem-certs
  labels:
    helm.sh/chart: identity-platform-1.0.0
    app.kubernetes.io/name: identity-platform
    app.kubernetes.io/part-of: identity-platform
    app.kubernetes.io/instance: identity-platform
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
data:
  import-pem-certs.sh: |
    #!/usr/bin/env bash
    # This script copies the default cacerts to $TRUSTSTORE_PATH
    # and imports all the certs contained in the $AM_PEM_TRUSTSTORE if it exists

    #
    # Copyright 2023-2025 Ping Identity Corporation. All Rights Reserved
    #
    # This code is to be used exclusively in connection with Ping Identity
    # Corporation software or services. Ping Identity Corporation only offers
    # such software or services to legal entities who have entered into a
    # binding license agreement with Ping Identity Corporation.
    #

    set -e
    set -o pipefail

    AM_DEFAULT_TRUSTSTORE=${AM_DEFAULT_TRUSTSTORE:-$JAVA_HOME/lib/security/cacerts}
    # If a $AM_PEM_TRUSTSTORE is provided, import it into the truststore. Otherwise, do nothing
    if [ -f "$AM_DEFAULT_TRUSTSTORE" ] && ( [ -f "$AM_PEM_TRUSTSTORE" ] || [ -f "$AM_PEM_TRUSTSTORE_DS" ] || [ -f "$AM_PEM_TRUSTSTORE_EXTRA" ); then
        TRUSTSTORE_PATH="${TRUSTSTORE_PATH:-/home/forgerock/amtruststore}"
        TRUSTSTORE_PASSWORD="${TRUSTSTORE_PASSWORD:-changeit}"
        echo "Copying ${AM_DEFAULT_TRUSTSTORE} to ${TRUSTSTORE_PATH}"
        cp ${AM_DEFAULT_TRUSTSTORE} ${TRUSTSTORE_PATH}
        # Combine certs in a single file
        touch am_combined_truststore
        [ -f "$AM_PEM_TRUSTSTORE" ] && cat $AM_PEM_TRUSTSTORE >> am_combined_truststore
        [ -f "$AM_PEM_TRUSTSTORE_DS" ] && cat $AM_PEM_TRUSTSTORE_DS >> am_combined_truststore
        [ -f "$AM_PEM_TRUSTSTORE_EXTRA" ] && cat $AM_PEM_TRUSTSTORE_EXTRA >> am_combined_truststore
        # Calculate the number of certs in the PEM file
        CERTS=$(grep 'END CERTIFICATE' am_combined_truststore| wc -l)
        echo "Found (${CERTS}) certificates in am_combined_truststore"
        echo "Importing (${CERTS}) certificates into ${TRUSTSTORE_PATH}"
        # For every cert in the PEM file, extract it and import into the JKS truststore
        for N in $(seq 0 $(($CERTS - 1))); do
            ALIAS="imported-certs-$N"
            cat am_combined_truststore |
                awk "n==$N { print }; /END CERTIFICATE/ { n++ }" |
                keytool -noprompt -importcert -trustcacerts -storetype JKS \
                        -alias "${ALIAS}" -keystore "${TRUSTSTORE_PATH}" \
                        -storepass "${TRUSTSTORE_PASSWORD}" || /bin/true
        done
        echo "Import complete!"
    else
        echo "Nothing was imported to the truststore. Check ENVs AM_DEFAULT_TRUSTSTORE and AM_PEM_TRUSTSTORE"
        exit -1
    fi
---
# Source: identity-platform/templates/am-logback-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: am-logback
  labels:
    helm.sh/chart: identity-platform-1.0.0
    app.kubernetes.io/name: identity-platform
    app.kubernetes.io/part-of: identity-platform
    app.kubernetes.io/instance: identity-platform
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
data:
  logback.xml: "<!--\n    ~ Copyright 2022-2024 Ping Identity Corporation. All Rights Reserved\n    ~ \n    ~ This code is to be used exclusively in connection with Ping Identity \n    ~ Corporation software or services. Ping Identity Corporation only offers\n    ~ such software or services to legal entities who have entered into a \n    ~ binding license agreement with Ping Identity Corporation.\n-->\n\n<configuration scan=\"true\" scanPeriod=\"30 seconds\">\n\n    <appender name=\"JSON\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\n            <layout class=\"org.forgerock.openam.logback.JsonLayout\">\n                <timestampFormat>yyyy-MM-dd'T'HH:mm:ss.SSSX</timestampFormat>\n                <timestampFormatTimezoneId>Etc/UTC</timestampFormatTimezoneId>\n                <jsonFormatter class=\"ch.qos.logback.contrib.jackson.JacksonJsonFormatter\"/>\n                <appendLineSeparator>true</appendLineSeparator>\n            </layout>\n        </encoder>\n    </appender>\n\n    <root level=\"WARN\">\n        <appender-ref ref=\"JSON\" />\n    </root>\n</configuration>"
---
# Source: identity-platform/templates/am-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: am
  labels:
    helm.sh/chart: identity-platform-1.0.0
    app.kubernetes.io/name: identity-platform
    app.kubernetes.io/part-of: identity-platform
    app.kubernetes.io/instance: identity-platform
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
    app: am
    app.kubernetes.io/component: am
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: https
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: identity-platform
    app.kubernetes.io/part-of: identity-platform
    app.kubernetes.io/instance: identity-platform
    app: am
    app.kubernetes.io/component: am
---
# Source: identity-platform/templates/am-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: am
  labels:
    helm.sh/chart: identity-platform-1.0.0
    app.kubernetes.io/name: identity-platform
    app.kubernetes.io/part-of: identity-platform
    app.kubernetes.io/instance: identity-platform
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
    app: am
    app.kubernetes.io/component: am
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: identity-platform
      app.kubernetes.io/part-of: identity-platform
      app.kubernetes.io/instance: identity-platform
      app: am
      app.kubernetes.io/component: am
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: identity-platform
        app.kubernetes.io/part-of: identity-platform
        app.kubernetes.io/instance: identity-platform
        app: am
        app.kubernetes.io/component: am
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 0
        runAsUser: 11111
      volumes:
        - name: fbc
          emptyDir: {}
        - name: am-secrets
          projected:
            sources:
              - secret:
                  name: am-passwords
              - secret:
                  name: am-keystore
        - name: amster-key
          secret:
            secretName: amster
            items:
              - key: id_rsa.pub
                path: authorized_keys
        - name: truststore
          projected:
            sources:
              - secret:
                  name: ds-ssl-keypair
        - name: new-truststore
          emptyDir: {}
        - name: am-logback
          configMap:
            name: am-logback
        - name: entrypoint-scripts
          configMap:
            name: am-entrypoint
        - name: am-import-pem-certs
          configMap:
            name: am-import-pem-certs
            defaultMode: 0755
      initContainers:
        - name: fbc-init
          image: am
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /fbc
              name: fbc
          command:
            - /bin/bash
            - -c
            - |
              if [ -d /fbc/config ];
              then
                echo "Existing openam configuration found. Skipping copy"
              else
                echo "Copying docker image configuration files to the shared volume"
                cd /home/forgerock/openam
                cp -r .homeVersion * /fbc
              fi
        - name: truststore-init
          image: am
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: new-truststore
              mountPath: /truststore
            - name: truststore
              mountPath: /var/run/secrets/truststore
            - name: am-import-pem-certs
              mountPath: /home/forgerock/import-pem-certs.sh
              subPath: import-pem-certs.sh
          command:
            - /home/forgerock/import-pem-certs.sh
          env:
            - name: TRUSTSTORE_PATH
              value: /truststore/amtruststore
            - name: TRUSTSTORE_PASSWORD
              value: changeit
            - name: AM_PEM_TRUSTSTORE
              value: /usr/lib/ssl/cert.pem
            - name: AM_PEM_TRUSTSTORE_DS
              value: /var/run/secrets/truststore/ca.crt
      containers:
        - name: openam
          securityContext: {}
          image: am
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - /home/forgerock/entrypoint-scripts/entrypoint.sh
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AM_STORES_SSL_ENABLED
              value: "true"
            - name: TRUSTSTORE_PATH
              value: /home/forgerock/amtruststore
            - name: TRUSTSTORE_PASSWORD
              value: changeit
            - name: AM_STORES_USER_TYPE
              value: LDAPv3ForForgeRockIAM
          envFrom:
            - secretRef:
                name: am-env-secrets
            - configMapRef:
                name: platform-config
            - secretRef:
                name: ds-env-secrets
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /am/json/health/live
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /am/json/health/ready
              port: http
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: /am/json/health/live
              port: http
            failureThreshold: 40
            periodSeconds: 10
          resources:
            limits:
              memory: 1800Mi
            requests:
              cpu: 250m
              memory: 1800Mi
          volumeMounts:
            - name: new-truststore
              mountPath: /home/forgerock/amtruststore
              readOnly: true
              subPath: amtruststore
            - name: am-secrets
              mountPath: /var/run/secrets/am
            - name: amster-key
              mountPath: /var/run/secrets/amster
            - name: fbc
              mountPath: /home/forgerock/openam
            - name: am-logback
              mountPath: /home/forgerock/logging
            - name: entrypoint-scripts
              mountPath: /home/forgerock/entrypoint-scripts
      tolerations:
        - effect: NoSchedule
          key: kubernetes.io/arch
          operator: Exists
---
# Source: identity-platform/templates/am-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: am
  labels:
    helm.sh/chart: identity-platform-1.0.0
    app.kubernetes.io/name: identity-platform
    app.kubernetes.io/part-of: identity-platform
    app.kubernetes.io/instance: identity-platform
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
    app: am
    app.kubernetes.io/component: am
  annotations:
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/body-size: 64m
    nginx.ingress.kubernetes.io/enable-cors: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: 64m
    nginx.ingress.kubernetes.io/proxy-buffer-size: 16k
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/send-timeout: "600"
    nginx.ingress.kubernetes.io/session-cookie-hash: sha1
    nginx.ingress.kubernetes.io/session-cookie-name: route
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - identity-platform.domain.local
      secretName: tls-identity-platform.domain.local
  rules:
    - host: identity-platform.domain.local
      http:
        paths:
          - path: /am
            pathType: Prefix
            backend:
              service:
                name: am
                port:
                  number: 80
