#!/usr/bin/env python3
"""This script starts/deletes a minikube instance"""

import argparse
import sys
import utils
import forgeops_dependencies
import platform
import os
import subprocess
import re
import yaml

DEFAULT_K8S_VERSION = "stable"

def _get_image_url(image_name):
    """ Get the image url from the product Dockerfiles """
    # Flag used to confirm if image name exists in image-defaulter
    image_name_found = False 
    
    # Get path to image defaulter
    image_defaulter = os.path.dirname(os.path.realpath(__file__)) + "/../../kustomize/deploy/image-defaulter/kustomization.yaml"

    # Open image defaulter file into data variable as dictionary
    with open(image_defaulter, 'r') as file:
        data = yaml.safe_load(file)
 
    # Loop through list of images and download the image from the data dictionary if it matches
    for item in data["images"]:
        if item["name"] == image_name:
            image_name_found = True
            
            # If newTag not set, then default to latest tag
            if "newTag" in item:
                tag = item["newTag"]
            else:
                tag = "latest"

            # Create full image url
            image_url = item["newName"] + ":" + tag
            
            # Download image
            utils.message(f'Downloading {image_url}...')
            try:
                utils.run('docker', f'pull {image_url}')
            except Exception as e:
                utils.error(f'{e} \n')

    if not image_name_found:
        utils.warning(f'Image name "{image_name}" not found in image defaulter')
                
def _set_minikube_docker_vars():
    """ Set the minikube docker env vars equivalent to running 'eval $(minikube docker-env)` shell command """
    # Get the current context
    _, context, _ = utils.run('kubectl', 'config current-context', cstderr=True, cstdout=True)

    # Check that the minikube context is set
    if not context.decode("UTF-8").rstrip('\n') == "minikube":
        utils.warning('Please ensure you have minikube installed and the context is set to "minikube"')
        sys.exit(1)

    # Get output from "minikube docker-env" command
    op = subprocess.check_output(['minikube', 'docker-env'])

    # Convert to string
    op_ext = op.decode("UTF-8")

    # Remove blank lines
    op_ext = os.linesep.join([s for s in op_ext.splitlines() if s])

    # Loop through string, split out env var values and set them
    for line in op_ext.splitlines():
        # Get all lines starting with a # so we can ignore them
        x = re.findall("^#", line)
        if not x:
            # Split the string so we can remove the preceding string "export"
            cmd = line.split(' ')[-1]
            # Set the env vars
            os.environ[cmd.split('=')[0]] = cmd.split('=')[1].strip('\"')

def _pull_image_locally():
    """ Pull the images locally to the minikube Docker environment """ 
    # List of Docker image directories in the Docker directory
    docker_images = ['am', 'amster', 'idm', 'ds']

    # Set minikube Docker env vars
    _set_minikube_docker_vars()

    # Loop through Docker images
    for docker_image_name in docker_images:
        _get_image_url(docker_image_name)

def main():
    """main"""
    parser = argparse.ArgumentParser(description='Start or delete a minikube instance')
    subparser = parser.add_subparsers(dest='cmd', required=True)
    subparser.add_parser('stop', help='Stop minikube')
    parser_delete = subparser.add_parser('delete', help='Delete minikube')
    parser_delete.add_argument('--skip-confirmation', '-y', help='Skip delete confirmation', action='store_true')
    parser_start = subparser.add_parser('start', help='Start minikube')
    parser_start.add_argument('--version', '-v', help="Set the Kubernetes version (default: stable)", default=DEFAULT_K8S_VERSION)
    parser_start.add_argument('--driver', '-d', help='Runtime driver', choices=['docker', 'hyperkit', 'vb', 'vmware', 'kvm2'], default='')
    parser_start.add_argument('--cpu', '-c', help='Number of CPUs', default='2')
    parser_start.add_argument('--ram', '-r', help='Amount of RAM', default='6g')
    parser_start.add_argument('--disk', '-k', help='Amount of Disk', default='40g')
    parser_start.add_argument('--no-pull-images', '-n', help='Do not pull product images', action='store_true')
    subparser.add_parser('pull-images', help='Pull product images to minikube docker registry')
    args = parser.parse_args()

    if args.cmd == 'delete':
        utils.message('Deleting the minikube instance.')
        if not args.skip_confirmation and input('Do you want to continue? [Y/N] ').lower() not in ['yes', 'y']:
            return
        utils.run('minikube', 'delete')
        return
    
    elif args.cmd == 'pull-images':
        # Configure Docker to pull images to the local minikube environment
        utils.message('Pulling product base images locally to the minikube Docker environment to reduce deployment time')
        
        # Pull Docker images to local minikube environment
        _pull_image_locally()
        return

    elif args.cmd == 'start':
        dvr_opts = {
        'docker': '--driver=docker',
        'hyperkit': '--driver=hyperkit',
        'vb': '--driver=virtualbox --bootstrapper kubeadm',
        'vmware': '--driver=vmware',
        'kvm2': '--driver=kvm2'
        }
        # Set the provided driver
        dvr = dvr_opts.get(getattr(args, 'driver', None), '')

        # Validate the operating system
        if "darwin" in platform.system().lower():
            if args.driver == 'kvm2':
                utils.error('The kvm2 driver is not available on macOS')
                sys.exit(1)
            if platform.processor() == 'i386':
                if args.driver in ['hyperkit', '']:
                    utils.run('hyperkit', '-v', cstdout=True, cstderr=True) #check if hyperkit is installed
                    dvr = dvr_opts.get('hyperkit', '')
                if args.driver == 'docker':
                    utils.error('The docker driver is not supported when deploying on Intel-based Macs')
                    sys.exit(1)
            if platform.processor() == 'arm':
                if args.driver == 'hyperkit':
                    utils.error('The hyperkit driver is not available on ARM-based Macs')
                    sys.exit(1)

        # Get minikube version
        _, minikube_ver, _ = utils.run('minikube', 'version --short', cstdout=True)
        minikube_ver = minikube_ver.decode('ascii')

        # Validate minikube version against minimum required version in utils.py
        forgeops_dependencies.check_component_version('minikube', minikube_ver)

        # Set minikube arguments
        k8s_ver = f'--kubernetes-version={args.version}'
        addons = '--addons=ingress,volumesnapshots,metrics-server'
        minikube_args = f'start --cpus={args.cpu} --memory={args.ram} --disk-size={args.disk} --cni=true {k8s_ver} {addons} {dvr}'
        
        # Run minikube command
        utils.message('Running: "minikube ' + minikube_args + '"')
        utils.run('minikube', minikube_args)

        # Pull images locally unless --no-pull-images provided
        if not args.no_pull_images:
            # Configure Docker to pull images to the local minikube environment
            utils.message('Pulling product images locally to the minikube Docker environment to reduce deployment time')
            
            # Pull Docker images to local minikube environment
            _pull_image_locally()
        else:
            utils.message('Not pulling product images locally to the minikube Docker environment. This can be done anytime using `forgeops-minikube pull-images`')
        
        return
    
    else:
        # Run minikube command with any supplied arguments
        utils.run('minikube', args.cmd)
    
if __name__ == '__main__':
    main()
